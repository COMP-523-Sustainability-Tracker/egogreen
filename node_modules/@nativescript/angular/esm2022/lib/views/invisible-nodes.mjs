import { View } from '@nativescript/core';
const getClassName = (instance) => instance.constructor.name;
export class InvisibleNode extends View {
    constructor(name = '') {
        super();
        this.name = name;
        this.nodeType = 1;
        this.nodeName = getClassName(this);
    }
    toString() {
        return `${this.nodeName}(${this.id})-${this.name}`;
    }
}
class CommentNode extends InvisibleNode {
    static { this.id = 0; }
    constructor(value) {
        super(value);
        this.meta = {
            skipAddToDom: true,
        };
        this.id = CommentNode.id.toString();
        CommentNode.id += 1;
    }
}
export { CommentNode };
class TextNode extends InvisibleNode {
    static { this.textChangeEvent = 'textChange'; }
    static { this.id = 0; }
    get text() {
        return this._text;
    }
    set text(t) {
        this._text = t;
        this.notify({ eventName: TextNode.textChangeEvent, object: this, value: t });
    }
    constructor(value) {
        super(value);
        this._text = '';
        this.callbackMap = new Map();
        this._text = value;
        this.meta = {
            skipAddToDom: true,
        };
        this.id = TextNode.id.toString();
        TextNode.id += 1;
    }
    registerTextChange(callback, id) {
        const cb = (evt) => callback(evt.value);
        const cbArr = this.callbackMap.get(id) || [];
        cbArr.push(cb);
        this.callbackMap.set(id, cbArr);
        this.on('textChange', cb);
    }
    unregisterTextChange(id) {
        const cbArr = this.callbackMap.get(id) || [];
        cbArr.forEach((cb) => this.off('textChange', cb));
        this.callbackMap.delete(id);
    }
}
export { TextNode };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW52aXNpYmxlLW5vZGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvYW5ndWxhci9zcmMvbGliL3ZpZXdzL2ludmlzaWJsZS1ub2Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFHMUMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO0FBRTdELE1BQU0sT0FBZ0IsYUFBYyxTQUFRLElBQUk7SUFZOUMsWUFBc0IsT0FBZSxFQUFFO1FBQ3JDLEtBQUssRUFBRSxDQUFDO1FBRFksU0FBSSxHQUFKLElBQUksQ0FBYTtRQUdyQyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztRQUNsQixJQUFJLENBQUMsUUFBUSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3JELENBQUM7Q0FDRjtBQUVELE1BQWEsV0FBWSxTQUFRLGFBQWE7YUFDM0IsT0FBRSxHQUFHLENBQUMsQ0FBQztJQUV4QixZQUFZLEtBQWM7UUFDeEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRWIsSUFBSSxDQUFDLElBQUksR0FBRztZQUNWLFlBQVksRUFBRSxJQUFJO1NBQ25CLENBQUM7UUFDRixJQUFJLENBQUMsRUFBRSxHQUFHLFdBQVcsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDcEMsV0FBVyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEIsQ0FBQzs7U0FYVSxXQUFXO0FBY3hCLE1BQWEsUUFBUyxTQUFRLGFBQWE7YUFDM0Isb0JBQWUsR0FBRyxZQUFZLEFBQWYsQ0FBZ0I7YUFDNUIsT0FBRSxHQUFHLENBQUMsQUFBSixDQUFLO0lBRXhCLElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBQ0QsSUFBSSxJQUFJLENBQUMsQ0FBUztRQUNoQixJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxTQUFTLEVBQUUsUUFBUSxDQUFDLGVBQWUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFHRCxZQUFZLEtBQWM7UUFDeEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBWEwsVUFBSyxHQUFHLEVBQUUsQ0FBQztRQVFyQixnQkFBVyxHQUFHLElBQUksR0FBRyxFQUFzQyxDQUFDO1FBSTFELElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBRW5CLElBQUksQ0FBQyxJQUFJLEdBQUc7WUFDVixZQUFZLEVBQUUsSUFBSTtTQUNuQixDQUFDO1FBQ0YsSUFBSSxDQUFDLEVBQUUsR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2pDLFFBQVEsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ25CLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxRQUFnQyxFQUFFLEVBQVc7UUFDOUQsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDeEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzdDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVELG9CQUFvQixDQUFDLEVBQVc7UUFDOUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzdDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDOUIsQ0FBQzs7U0FwQ1UsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZpZXcgfSBmcm9tICdAbmF0aXZlc2NyaXB0L2NvcmUnO1xuaW1wb3J0IHsgTmdWaWV3IH0gZnJvbSAnLi92aWV3LXR5cGVzJztcblxuY29uc3QgZ2V0Q2xhc3NOYW1lID0gKGluc3RhbmNlKSA9PiBpbnN0YW5jZS5jb25zdHJ1Y3Rvci5uYW1lO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSW52aXNpYmxlTm9kZSBleHRlbmRzIFZpZXcgaW1wbGVtZW50cyBOZ1ZpZXcge1xuICBtZXRhOiB7IHNraXBBZGRUb0RvbTogYm9vbGVhbiB9O1xuICBub2RlVHlwZTogbnVtYmVyO1xuICBub2RlTmFtZTogc3RyaW5nO1xuICAvLyBAdHMtaWdub3JlXG4gIHBhcmVudE5vZGU6IE5nVmlldztcbiAgbmV4dFNpYmxpbmc6IE5nVmlldztcbiAgcHJldmlvdXNTaWJsaW5nOiBOZ1ZpZXc7XG4gIGZpcnN0Q2hpbGQ6IE5nVmlldztcbiAgbGFzdENoaWxkOiBOZ1ZpZXc7XG4gIG5nQ3NzQ2xhc3NlczogTWFwPHN0cmluZywgYm9vbGVhbj47XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIG5hbWU6IHN0cmluZyA9ICcnKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMubm9kZVR5cGUgPSAxO1xuICAgIHRoaXMubm9kZU5hbWUgPSBnZXRDbGFzc05hbWUodGhpcyk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gYCR7dGhpcy5ub2RlTmFtZX0oJHt0aGlzLmlkfSktJHt0aGlzLm5hbWV9YDtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29tbWVudE5vZGUgZXh0ZW5kcyBJbnZpc2libGVOb2RlIHtcbiAgcHJvdGVjdGVkIHN0YXRpYyBpZCA9IDA7XG5cbiAgY29uc3RydWN0b3IodmFsdWU/OiBzdHJpbmcpIHtcbiAgICBzdXBlcih2YWx1ZSk7XG5cbiAgICB0aGlzLm1ldGEgPSB7XG4gICAgICBza2lwQWRkVG9Eb206IHRydWUsXG4gICAgfTtcbiAgICB0aGlzLmlkID0gQ29tbWVudE5vZGUuaWQudG9TdHJpbmcoKTtcbiAgICBDb21tZW50Tm9kZS5pZCArPSAxO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUZXh0Tm9kZSBleHRlbmRzIEludmlzaWJsZU5vZGUge1xuICBwdWJsaWMgc3RhdGljIHRleHRDaGFuZ2VFdmVudCA9ICd0ZXh0Q2hhbmdlJztcbiAgcHJvdGVjdGVkIHN0YXRpYyBpZCA9IDA7XG4gIHByb3RlY3RlZCBfdGV4dCA9ICcnO1xuICBnZXQgdGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdGV4dDtcbiAgfVxuICBzZXQgdGV4dCh0OiBzdHJpbmcpIHtcbiAgICB0aGlzLl90ZXh0ID0gdDtcbiAgICB0aGlzLm5vdGlmeSh7IGV2ZW50TmFtZTogVGV4dE5vZGUudGV4dENoYW5nZUV2ZW50LCBvYmplY3Q6IHRoaXMsIHZhbHVlOiB0IH0pO1xuICB9XG4gIGNhbGxiYWNrTWFwID0gbmV3IE1hcDx1bmtub3duLCBBcnJheTwoZXZ0OiBhbnkpID0+IHZvaWQ+PigpO1xuXG4gIGNvbnN0cnVjdG9yKHZhbHVlPzogc3RyaW5nKSB7XG4gICAgc3VwZXIodmFsdWUpO1xuICAgIHRoaXMuX3RleHQgPSB2YWx1ZTtcblxuICAgIHRoaXMubWV0YSA9IHtcbiAgICAgIHNraXBBZGRUb0RvbTogdHJ1ZSxcbiAgICB9O1xuICAgIHRoaXMuaWQgPSBUZXh0Tm9kZS5pZC50b1N0cmluZygpO1xuICAgIFRleHROb2RlLmlkICs9IDE7XG4gIH1cblxuICByZWdpc3RlclRleHRDaGFuZ2UoY2FsbGJhY2s6ICh0ZXh0OiBzdHJpbmcpID0+IHZvaWQsIGlkOiB1bmtub3duKSB7XG4gICAgY29uc3QgY2IgPSAoZXZ0KSA9PiBjYWxsYmFjayhldnQudmFsdWUpO1xuICAgIGNvbnN0IGNiQXJyID0gdGhpcy5jYWxsYmFja01hcC5nZXQoaWQpIHx8IFtdO1xuICAgIGNiQXJyLnB1c2goY2IpO1xuICAgIHRoaXMuY2FsbGJhY2tNYXAuc2V0KGlkLCBjYkFycik7XG4gICAgdGhpcy5vbigndGV4dENoYW5nZScsIGNiKTtcbiAgfVxuXG4gIHVucmVnaXN0ZXJUZXh0Q2hhbmdlKGlkOiB1bmtub3duKSB7XG4gICAgY29uc3QgY2JBcnIgPSB0aGlzLmNhbGxiYWNrTWFwLmdldChpZCkgfHwgW107XG4gICAgY2JBcnIuZm9yRWFjaCgoY2IpID0+IHRoaXMub2ZmKCd0ZXh0Q2hhbmdlJywgY2IpKTtcbiAgICB0aGlzLmNhbGxiYWNrTWFwLmRlbGV0ZShpZCk7XG4gIH1cbn1cbiJdfQ==