import { __decorate, __metadata, __param } from "tslib";
import { Inject, Injectable, Optional, RendererStyleFlags2, ViewEncapsulation } from '@angular/core';
import { addTaggedAdditionalCSS, Application, ContentView, getViewById, Observable, profile, View } from '@nativescript/core';
import { isKnownView } from './element-registry';
import { getFirstNativeLikeView, TextNode } from './views';
import { NAMESPACE_FILTERS } from './property-filter';
import { APP_ROOT_VIEW, ENABLE_REUSABE_VIEWS, NATIVESCRIPT_ROOT_MODULE_ID } from './tokens';
import { NativeScriptDebug } from './trace';
import { ViewUtil } from './view-util';
import * as i0 from "@angular/core";
import * as i1 from "@nativescript/core";
const addStyleToCss = profile('"renderer".addStyleToCss', function addStyleToCss(style, tag) {
    if (tag) {
        addTaggedAdditionalCSS(style, tag);
    }
    else {
        Application.addCss(style);
    }
});
function runInRootZone(fn) {
    if (typeof Zone === 'undefined') {
        return fn();
    }
    return Zone.root.run(fn);
}
function inRootZone() {
    return function (target, key, descriptor) {
        const childFunction = descriptor.value;
        descriptor.value = function (...args) {
            const fn = childFunction.bind(this);
            return runInRootZone(() => fn(...args));
        };
        return descriptor;
    };
}
let NativeScriptRendererFactory = class NativeScriptRendererFactory {
    constructor(rootView, namespaceFilters, rootModuleID, reuseViews) {
        this.rootView = rootView;
        this.namespaceFilters = namespaceFilters;
        this.rootModuleID = rootModuleID;
        this.reuseViews = reuseViews;
        this.componentRenderers = new Map();
        // backwards compatibility with RadListView
        this.viewUtil = new ViewUtil(this.namespaceFilters, this.reuseViews);
        if (typeof this.reuseViews !== 'boolean') {
            this.reuseViews = false; // default to false
        }
        this.defaultRenderer = new NativeScriptRenderer(rootView, namespaceFilters, this.reuseViews);
    }
    createRenderer(hostElement, type) {
        if (NativeScriptDebug.enabled) {
            NativeScriptDebug.rendererLog(`NativeScriptRendererFactory.createRenderer ${hostElement}. type.id: ${type.id} type.encapsulation: ${type.encapsulation}`);
        }
        if (!hostElement || !type) {
            return this.defaultRenderer;
        }
        let renderer = this.componentRenderers.get(type.id);
        /**
         *! WARNING
         *! We're reusing the renderer for the components
         *! this might cause unexpected behavior as the "rootView" is an arbitrary hostElement
         *! also, the renderer has it's .destroy() called!
         *! might be useful to create a BaseEmulatedRender and a ProxyEmulatedRender
         *! every component type gets a BaseEmulatedRender (singleton) which is passed to ProxyEmulatedRender
         *! ProxyEmulatedRenderer registers with BaseEmulatedRender so we can clean up things like CSS when it's not needed
         *! this might be useful if we find a way to HMR component styling without a full rebootstrap
         */
        if (renderer) {
            if (renderer instanceof EmulatedRenderer) {
                renderer.applyToHost(hostElement);
            }
            return renderer;
        }
        if (type.encapsulation === ViewEncapsulation.None) {
            type.styles.map((s) => s.toString()).forEach((v) => addStyleToCss(v, this.rootModuleID));
            renderer = this.defaultRenderer;
        }
        else {
            renderer = new EmulatedRenderer(type, hostElement, this.namespaceFilters, this.rootModuleID, this.reuseViews);
            renderer.applyToHost(hostElement);
        }
        this.componentRenderers.set(type.id, renderer);
        return renderer;
    }
    // begin?(): void {
    //     throw new Error("Method not implemented.");
    // }
    // end?(): void {
    //     throw new Error("Method not implemented.");
    // }
    whenRenderingDone() {
        if (!this.rootView) {
            return Promise.resolve();
        }
        return new Promise((resolve) => {
            let interval = 0;
            function scheduleResolve() {
                // iOS really hates synchronous things...
                // Utils.queueMacrotask(resolve);
                setTimeout(resolve, 15);
            }
            function fireWhenLoaded() {
                const view = rootFactory();
                if (view.isLoaded) {
                    scheduleResolve();
                }
                else {
                    view.once('loaded', scheduleResolve);
                }
            }
            const rootFactory = () => (this.rootView instanceof ContentView ? this.rootView.content : this.rootView);
            if (!rootFactory()) {
                interval = setInterval(() => {
                    if (rootFactory()) {
                        clearInterval(interval);
                        fireWhenLoaded();
                    }
                }, 10);
            }
            else {
                fireWhenLoaded();
            }
        });
        // throw new Error("Method not implemented.");
    }
};
NativeScriptRendererFactory = __decorate([
    __param(0, Inject(APP_ROOT_VIEW)),
    __param(1, Inject(NAMESPACE_FILTERS)),
    __param(2, Inject(NATIVESCRIPT_ROOT_MODULE_ID)),
    __param(3, Optional()),
    __param(3, Inject(ENABLE_REUSABE_VIEWS)),
    __metadata("design:paramtypes", [View, Array, Object, Object])
], NativeScriptRendererFactory);
export { NativeScriptRendererFactory };
class NativeScriptRenderer {
    constructor(rootView, namespaceFilters, reuseViews) {
        this.rootView = rootView;
        this.namespaceFilters = namespaceFilters;
        this.reuseViews = reuseViews;
        this.viewUtil = new ViewUtil(this.namespaceFilters, this.reuseViews);
        this.destroyNode = (node) => runInRootZone(() => {
            if (NativeScriptDebug.enabled) {
                NativeScriptDebug.rendererLog(`NativeScriptRenderer.destroyNode node: ${node}`);
            }
            if (node?.destroyNode) {
                node?.destroyNode();
            }
        });
    }
    get data() {
        throw new Error('Method not implemented.');
    }
    destroy() {
        if (NativeScriptDebug.enabled) {
            NativeScriptDebug.rendererLog('NativeScriptRenderer.destroy');
        }
    }
    createElement(name, namespace) {
        if (NativeScriptDebug.enabled) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.createElement: ${name}`);
        }
        let oldName;
        if (!isKnownView(name)) {
            oldName = name;
            name = 'ProxyViewContainer';
        }
        const view = this.viewUtil.createView(name);
        if (oldName) {
            view.customCSSName = oldName;
        }
        return view;
    }
    createComment(value) {
        if (NativeScriptDebug.enabled) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.createComment ${value}`);
        }
        return this.viewUtil.createComment(value);
    }
    createText(value) {
        if (NativeScriptDebug.enabled) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.createText ${value}`);
        }
        return this.viewUtil.createText(value);
    }
    appendChild(parent, newChild) {
        if (NativeScriptDebug.enabled) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.appendChild child: ${newChild} parent: ${parent}`);
        }
        this.viewUtil.appendChild(parent, newChild);
    }
    insertBefore(parent, newChild, refChild) {
        if (NativeScriptDebug.enabled) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.insertBefore child: ${newChild} ` + `parent: ${parent} refChild: ${refChild}`);
        }
        this.viewUtil.insertBefore(parent, newChild, refChild);
    }
    removeChild(parent, oldChild, isHostElement) {
        if (NativeScriptDebug.enabled) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.removeChild child: ${oldChild} parent: ${parent}`);
        }
        this.viewUtil.removeChild(parent, oldChild);
    }
    selectRootElement(selectorOrNode, preserveContent) {
        if (NativeScriptDebug.enabled) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.selectRootElement: ${selectorOrNode}`);
        }
        if (selectorOrNode instanceof View) {
            return selectorOrNode;
        }
        if (selectorOrNode && selectorOrNode[0] === '#') {
            const result = getViewById(this.rootView, selectorOrNode.slice(1));
            return (result || this.rootView);
        }
        if (typeof selectorOrNode === 'string') {
            const view = this.viewUtil.createView(selectorOrNode);
            if (getFirstNativeLikeView(view) === view) {
                // view is nativelike!
                this.appendChild(this.rootView, view);
                return view;
            }
        }
        return this.rootView;
    }
    parentNode(node) {
        if (NativeScriptDebug.enabled) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.parentNode for node: ${node} is ${node.parentNode}`);
        }
        return node.parentNode;
    }
    nextSibling(node) {
        if (NativeScriptDebug.enabled) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.nextSibling of ${node} is ${node.nextSibling}`);
        }
        return node.nextSibling;
    }
    setAttribute(el, name, value, namespace) {
        if (NativeScriptDebug.enabled) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.setAttribute ${namespace ? namespace + ':' : ''}${el}.${name} = ${value}`);
        }
        this.viewUtil.setProperty(el, name, value, namespace);
    }
    removeAttribute(el, name, namespace) {
        if (NativeScriptDebug.enabled) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.removeAttribute ${namespace ? namespace + ':' : ''}${el}.${name}`);
        }
    }
    addClass(el, name) {
        if (NativeScriptDebug.enabled) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.addClass ${name}`);
        }
        this.viewUtil.addClass(el, name);
    }
    removeClass(el, name) {
        if (NativeScriptDebug.enabled) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.removeClass ${name}`);
        }
        this.viewUtil.removeClass(el, name);
    }
    setStyle(el, style, value, flags) {
        if (NativeScriptDebug.enabled) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.setStyle: ${el}, ${style} = ${value}`);
        }
        this.viewUtil.setStyle(el, style, value);
    }
    removeStyle(el, style, flags) {
        if (NativeScriptDebug.enabled) {
            NativeScriptDebug.rendererLog('NativeScriptRenderer.removeStyle: ${styleName}');
        }
        this.viewUtil.removeStyle(el, style);
    }
    setProperty(el, name, value) {
        if (NativeScriptDebug.enabled) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.setProperty ${el}.${name} = ${value}`);
        }
        this.viewUtil.setProperty(el, name, value);
    }
    setValue(node, value) {
        if (NativeScriptDebug.enabled) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.setValue renderNode: ${node}, value: ${value}`);
        }
        if (node instanceof TextNode) {
            node.text = value;
        }
        // throw new Error("Method not implemented.");
    }
    listen(target, eventName, callback) {
        // throw new Error("Method not implemented.");
        if (NativeScriptDebug.enabled) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.listen: ${eventName}`);
        }
        target.on(eventName, callback);
        if (eventName === View.loadedEvent && target.isLoaded) {
            // we must create a new obervable here to ensure that the event goes through whatever zone patches are applied
            const obs = new Observable();
            obs.once(eventName, callback);
            obs.notify({
                eventName,
                object: target,
            });
        }
        return () => target.off(eventName, callback);
    }
}
__decorate([
    inRootZone(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String]),
    __metadata("design:returntype", void 0)
], NativeScriptRenderer.prototype, "createElement", null);
__decorate([
    inRootZone(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], NativeScriptRenderer.prototype, "createComment", null);
__decorate([
    inRootZone(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], NativeScriptRenderer.prototype, "createText", null);
__decorate([
    inRootZone(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [View, View]),
    __metadata("design:returntype", void 0)
], NativeScriptRenderer.prototype, "appendChild", null);
__decorate([
    inRootZone(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object, Object]),
    __metadata("design:returntype", void 0)
], NativeScriptRenderer.prototype, "insertBefore", null);
__decorate([
    inRootZone(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object, Boolean]),
    __metadata("design:returntype", void 0)
], NativeScriptRenderer.prototype, "removeChild", null);
__decorate([
    inRootZone(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, String, String, String]),
    __metadata("design:returntype", void 0)
], NativeScriptRenderer.prototype, "setAttribute", null);
__decorate([
    inRootZone(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, String]),
    __metadata("design:returntype", void 0)
], NativeScriptRenderer.prototype, "addClass", null);
__decorate([
    inRootZone(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, String]),
    __metadata("design:returntype", void 0)
], NativeScriptRenderer.prototype, "removeClass", null);
__decorate([
    inRootZone(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, String, Object, Number]),
    __metadata("design:returntype", void 0)
], NativeScriptRenderer.prototype, "setStyle", null);
__decorate([
    inRootZone(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, String, Number]),
    __metadata("design:returntype", void 0)
], NativeScriptRenderer.prototype, "removeStyle", null);
__decorate([
    inRootZone(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, String, Object]),
    __metadata("design:returntype", void 0)
], NativeScriptRenderer.prototype, "setProperty", null);
// CONTENT_ATTR not exported from nativescript-renderer - we need it for styles application.
const COMPONENT_REGEX = /%COMP%/g;
const ATTR_SANITIZER = /-/g;
export const COMPONENT_VARIABLE = '%COMP%';
export const HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;
export const CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;
const replaceNgAttribute = function (input, componentId) {
    return input.replace(COMPONENT_REGEX, componentId);
};
const addScopedStyleToCss = profile(`"renderer".addScopedStyleToCss`, function addScopedStyleToCss(style, tag) {
    if (tag) {
        addTaggedAdditionalCSS(style, tag);
    }
    else {
        Application.addCss(style);
    }
});
class EmulatedRenderer extends NativeScriptRenderer {
    constructor(component, rootView, namespaceFilters, rootModuleId, reuseViews) {
        super(rootView, namespaceFilters, reuseViews);
        this.rootModuleId = rootModuleId;
        const componentId = component.id.replace(ATTR_SANITIZER, '_');
        this.contentAttr = replaceNgAttribute(CONTENT_ATTR, componentId);
        this.hostAttr = replaceNgAttribute(HOST_ATTR, componentId);
        this.addStyles(component.styles, componentId);
    }
    applyToHost(view) {
        super.setAttribute(view, this.hostAttr, '');
    }
    appendChild(parent, newChild) {
        super.appendChild(parent, newChild);
    }
    createElement(parent, name) {
        const view = super.createElement(parent, name);
        // Set an attribute to the view to scope component-specific css.
        // The property name is pre-generated by Angular.
        super.setAttribute(view, this.contentAttr, '');
        return view;
    }
    addStyles(styles, componentId) {
        styles
            .map((s) => s.toString())
            .map((s) => replaceNgAttribute(s, componentId))
            .forEach((s) => addScopedStyleToCss(s, this.rootModuleId));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: EmulatedRenderer, deps: "invalid", target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: EmulatedRenderer }); }
}
__decorate([
    profile,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Array, String]),
    __metadata("design:returntype", void 0)
], EmulatedRenderer.prototype, "addStyles", null);
export { EmulatedRenderer };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: EmulatedRenderer, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined }, { type: i1.View }, { type: undefined }, { type: undefined }, { type: undefined }]; }, propDecorators: { addStyles: [] } });
//# sourceMappingURL=data:application/json;base64,