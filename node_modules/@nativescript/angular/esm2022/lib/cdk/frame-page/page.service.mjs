import { ElementRef, Injectable, Optional } from '@angular/core';
import { Page, ViewBase } from '@nativescript/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@nativescript/core";
class PageService {
    get inPage() {
        return this._inPage$.value;
    }
    get inPage$() {
        return this._inPage$.pipe(distinctUntilChanged());
    }
    get pageEvents$() {
        return this._pageEvents$.asObservable();
    }
    constructor(page, elRef, view) {
        this._pageEvents$ = new Subject();
        if (page) {
            this.page = page;
        }
        else {
            view = view || elRef.nativeElement;
            while (view) {
                if (view instanceof Page) {
                    this.page = view;
                    break;
                }
                view = view.parent;
            }
        }
        this._inPage$ = new BehaviorSubject(!!this.page?.isLoaded);
        if (this.page) {
            this.page.on('navigatedFrom', this.pageEvent, this);
            this.page.on('navigatedTo', this.pageEvent, this);
            this.page.on('navigatingFrom', this.pageEvent, this);
            this.page.on('navigatingTo', this.pageEvent, this);
        }
    }
    ngOnDestroy() {
        if (this.page) {
            this.page.off('navigatedFrom', this.pageEvent, this);
            this.page.off('navigatedTo', this.pageEvent, this);
            this.page.off('navigatingFrom', this.pageEvent, this);
            this.page.off('navigatingTo', this.pageEvent, this);
        }
        this._inPage$.complete();
        this._pageEvents$.complete();
    }
    pageEvent(evt) {
        this._pageEvents$.next(evt);
        switch (evt.eventName) {
            case 'navigatedTo':
                this._inPage$.next(true);
                break;
            case 'navigatedFrom':
                this._inPage$.next(false);
                break;
            default:
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: PageService, deps: [{ token: i1.Page, optional: true }, { token: i0.ElementRef, optional: true }, { token: i1.ViewBase, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: PageService }); }
}
export { PageService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: PageService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Page, decorators: [{
                    type: Optional
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Optional
                }] }, { type: i1.ViewBase, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvYW5ndWxhci9zcmMvbGliL2Nkay9mcmFtZS1wYWdlL3BhZ2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFVLFVBQVUsRUFBYSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEYsT0FBTyxFQUFpQixJQUFJLEVBQVEsUUFBUSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDekUsT0FBTyxFQUFFLGVBQWUsRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDNUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQUV0RCxNQUNhLFdBQVc7SUFLdEIsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztJQUM3QixDQUFDO0lBQ0QsSUFBSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUNELElBQUksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMxQyxDQUFDO0lBQ0QsWUFBd0IsSUFBVyxFQUFjLEtBQTRCLEVBQWMsSUFBZTtRQVhsRyxpQkFBWSxHQUFHLElBQUksT0FBTyxFQUFpQixDQUFDO1FBWWxELElBQUksSUFBSSxFQUFFO1lBQ1IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7U0FDbEI7YUFBTTtZQUNMLElBQUksR0FBRyxJQUFJLElBQUksS0FBSyxDQUFDLGFBQWEsQ0FBQztZQUNuQyxPQUFPLElBQUksRUFBRTtnQkFDWCxJQUFJLElBQUksWUFBWSxJQUFJLEVBQUU7b0JBQ3hCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO29CQUNqQixNQUFNO2lCQUNQO2dCQUNELElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO2FBQ3BCO1NBQ0Y7UUFDRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksZUFBZSxDQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3BFLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNiLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3BELElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ2xELElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDckQsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDcEQ7SUFDSCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNiLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3JELElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ25ELElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDdEQsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDckQ7UUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUVPLFNBQVMsQ0FBQyxHQUFrQjtRQUNsQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM1QixRQUFRLEdBQUcsQ0FBQyxTQUFTLEVBQUU7WUFDckIsS0FBSyxhQUFhO2dCQUNoQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDekIsTUFBTTtZQUNSLEtBQUssZUFBZTtnQkFDbEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQzFCLE1BQU07WUFDUixRQUFRO1NBQ1Q7SUFDSCxDQUFDOzhHQTFEVSxXQUFXO2tIQUFYLFdBQVc7O1NBQVgsV0FBVzsyRkFBWCxXQUFXO2tCQUR2QixVQUFVOzswQkFlSSxRQUFROzswQkFBaUIsUUFBUTs7MEJBQWtDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBJbmplY3QsIEluamVjdGFibGUsIE9uRGVzdHJveSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5hdmlnYXRlZERhdGEsIFBhZ2UsIFZpZXcsIFZpZXdCYXNlIH0gZnJvbSAnQG5hdGl2ZXNjcmlwdC9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQYWdlU2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIHBhZ2U6IFBhZ2U7XG4gIHByaXZhdGUgX2luUGFnZSQ6IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPjtcbiAgcHJpdmF0ZSBfcGFnZUV2ZW50cyQgPSBuZXcgU3ViamVjdDxOYXZpZ2F0ZWREYXRhPigpO1xuXG4gIGdldCBpblBhZ2UoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2luUGFnZSQudmFsdWU7XG4gIH1cbiAgZ2V0IGluUGFnZSQoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuX2luUGFnZSQucGlwZShkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKTtcbiAgfVxuICBnZXQgcGFnZUV2ZW50cyQoKTogT2JzZXJ2YWJsZTxOYXZpZ2F0ZWREYXRhPiB7XG4gICAgcmV0dXJuIHRoaXMuX3BhZ2VFdmVudHMkLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIHBhZ2U/OiBQYWdlLCBAT3B0aW9uYWwoKSBlbFJlZj86IEVsZW1lbnRSZWY8Vmlld0Jhc2U+LCBAT3B0aW9uYWwoKSB2aWV3PzogVmlld0Jhc2UpIHtcbiAgICBpZiAocGFnZSkge1xuICAgICAgdGhpcy5wYWdlID0gcGFnZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmlldyA9IHZpZXcgfHwgZWxSZWYubmF0aXZlRWxlbWVudDtcbiAgICAgIHdoaWxlICh2aWV3KSB7XG4gICAgICAgIGlmICh2aWV3IGluc3RhbmNlb2YgUGFnZSkge1xuICAgICAgICAgIHRoaXMucGFnZSA9IHZpZXc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdmlldyA9IHZpZXcucGFyZW50O1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9pblBhZ2UkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPighIXRoaXMucGFnZT8uaXNMb2FkZWQpO1xuICAgIGlmICh0aGlzLnBhZ2UpIHtcbiAgICAgIHRoaXMucGFnZS5vbignbmF2aWdhdGVkRnJvbScsIHRoaXMucGFnZUV2ZW50LCB0aGlzKTtcbiAgICAgIHRoaXMucGFnZS5vbignbmF2aWdhdGVkVG8nLCB0aGlzLnBhZ2VFdmVudCwgdGhpcyk7XG4gICAgICB0aGlzLnBhZ2Uub24oJ25hdmlnYXRpbmdGcm9tJywgdGhpcy5wYWdlRXZlbnQsIHRoaXMpO1xuICAgICAgdGhpcy5wYWdlLm9uKCduYXZpZ2F0aW5nVG8nLCB0aGlzLnBhZ2VFdmVudCwgdGhpcyk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMucGFnZSkge1xuICAgICAgdGhpcy5wYWdlLm9mZignbmF2aWdhdGVkRnJvbScsIHRoaXMucGFnZUV2ZW50LCB0aGlzKTtcbiAgICAgIHRoaXMucGFnZS5vZmYoJ25hdmlnYXRlZFRvJywgdGhpcy5wYWdlRXZlbnQsIHRoaXMpO1xuICAgICAgdGhpcy5wYWdlLm9mZignbmF2aWdhdGluZ0Zyb20nLCB0aGlzLnBhZ2VFdmVudCwgdGhpcyk7XG4gICAgICB0aGlzLnBhZ2Uub2ZmKCduYXZpZ2F0aW5nVG8nLCB0aGlzLnBhZ2VFdmVudCwgdGhpcyk7XG4gICAgfVxuICAgIHRoaXMuX2luUGFnZSQuY29tcGxldGUoKTtcbiAgICB0aGlzLl9wYWdlRXZlbnRzJC5jb21wbGV0ZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBwYWdlRXZlbnQoZXZ0OiBOYXZpZ2F0ZWREYXRhKSB7XG4gICAgdGhpcy5fcGFnZUV2ZW50cyQubmV4dChldnQpO1xuICAgIHN3aXRjaCAoZXZ0LmV2ZW50TmFtZSkge1xuICAgICAgY2FzZSAnbmF2aWdhdGVkVG8nOlxuICAgICAgICB0aGlzLl9pblBhZ2UkLm5leHQodHJ1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbmF2aWdhdGVkRnJvbSc6XG4gICAgICAgIHRoaXMuX2luUGFnZSQubmV4dChmYWxzZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICB9XG4gIH1cbn1cbiJdfQ==