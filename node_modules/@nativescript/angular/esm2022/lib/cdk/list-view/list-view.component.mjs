import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, Directive, ElementRef, EventEmitter, forwardRef, Host, HostListener, inject, Inject, InjectionToken, Input, IterableDiffers, Output, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';
import { LayoutBase, ObservableArray, profile } from '@nativescript/core';
import { extractSingleViewRecursive } from '../../element-registry/registry';
import { NativeScriptDebug } from '../../trace';
import { isListLikeIterable } from '../../utils/general';
import * as i0 from "@angular/core";
const NG_VIEW = '_ngViewRef';
export const TEMPLATED_ITEMS_COMPONENT = new InjectionToken('TemplatedItemsComponent');
export class ItemContext {
    constructor($implicit, item, index, even, odd) {
        this.$implicit = $implicit;
        this.item = item;
        this.index = index;
        this.even = even;
        this.odd = odd;
    }
}
export class NsTemplatedItem {
    constructor(template, location, onCreate) {
        this.template = template;
        this.location = location;
        this.onCreate = onCreate;
    }
    create(context) {
        const viewRef = this.location.createEmbeddedView(this.template, context ? this.setupItemContext(context) : new ItemContext());
        viewRef.detach(); // create detached, just beware this doesn't always work and the view might run the first CD anyway.
        const resultView = getItemViewRoot(viewRef);
        resultView[NG_VIEW] = viewRef;
        if (this.onCreate) {
            this.onCreate(resultView);
        }
        return resultView;
    }
    update(view, context) {
        const viewRef = this.getEmbeddedViewRef(view);
        this.setupItemContext(context, viewRef);
        viewRef?.detectChanges();
    }
    attach(view) {
        const viewRef = this.getEmbeddedViewRef(view);
        viewRef?.reattach();
        viewRef?.detectChanges();
    }
    detach(view) {
        const viewRef = this.getEmbeddedViewRef(view);
        viewRef?.detach();
    }
    dispose(view) {
        const viewRef = this.getEmbeddedViewRef(view);
        viewRef?.destroy();
    }
    getEmbeddedViewRef(view) {
        let viewRef = view[NG_VIEW];
        // Getting angular view from original element (in cases when ProxyViewContainer
        // is used NativeScript internally wraps it in a StackLayout)
        if (!viewRef && view instanceof LayoutBase && view.getChildrenCount() > 0) {
            viewRef = view.getChildAt(0)[NG_VIEW];
        }
        return viewRef;
    }
    isValid(view) {
        return !!this.getEmbeddedViewRef(view);
    }
    setupItemContext({ index, data }, oldView) {
        const context = oldView ? oldView.context : new ItemContext();
        context.$implicit = data;
        context.item = data;
        context.index = index;
        context.even = index % 2 === 0;
        context.odd = !context.even;
        return context;
    }
}
class ListViewComponent {
    get nativeElement() {
        return this.templatedItemsView;
    }
    get items() {
        return this._items;
    }
    set items(value) {
        this._items = value;
        let needDiffer = true;
        if (value instanceof ObservableArray) {
            needDiffer = false;
        }
        if (needDiffer && !this._differ && isListLikeIterable(value)) {
            this._differ = this._iterableDiffers.find(this._items).create((_index, item) => {
                return item;
            });
        }
        this.templatedItemsView.items = this._items;
    }
    // this elementRef is only here for backwards compatibility reasons
    constructor(_elementRef) {
        this._iterableDiffers = inject(IterableDiffers);
        this._changeDetectorRef = inject(ChangeDetectorRef);
        this._elementRef = inject(ElementRef);
        // I believe this only exists so this can be inherited and people can override it.
        this.templatedItemsView = this._elementRef.nativeElement;
        this._viewToTemplate = new WeakMap();
        this.setupItemView = new EventEmitter();
        if (_elementRef) {
            this.templatedItemsView = _elementRef.nativeElement;
        }
    }
    ngAfterContentInit() {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.listViewLog('TemplatedItemsView.ngAfterContentInit()');
        }
        this.setItemTemplates();
    }
    ngOnDestroy() {
        this.templatedItemsView = null;
        if (this._templateMap) {
            this._templateMap.clear();
        }
    }
    setItemTemplates() {
        // The itemTemplateQuery may be changed after list items are added that contain <template> inside,
        // so cache and use only the original template to avoid errors.
        this.fallbackItemTemplate = this.itemTemplateQuery;
        if (this.fallbackItemTemplate && !this._templateMap?.has('default')) {
            // apparently you can create a Core ListView without a template...
            // we also add a fallback default for when the user sets multiple templates but no templateSelector
            this.registerTemplate('default', this.fallbackItemTemplate);
        }
        if (this._templateMap) {
            // sometimes templates are registered before loader is ready, so we update here
            this._templateMap.forEach((t) => (t.location = this.loader));
            if (NativeScriptDebug.isLogEnabled()) {
                NativeScriptDebug.listViewLog('Setting templates');
            }
            const templates = [];
            this._templateMap.forEach((value, key) => {
                templates.push({
                    createView: () => null,
                    key,
                });
            });
            this.templatedItemsView.itemTemplates = templates;
        }
    }
    registerTemplate(key, template) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.listViewLog(`registerTemplate for key: ${key}, ${this.loader}`);
        }
        if (!this._templateMap) {
            this._templateMap = new Map();
        }
        this._templateMap.set(key, new NsTemplatedItem(template, this.loader, (v) => this._viewToTemplate.set(v, key)));
    }
    onItemLoading(args) {
        if (!this._templateMap) {
            return;
        }
        const index = args.index;
        const lview = args.object;
        const items = lview.items;
        const currentItem = 'getItem' in items && typeof items.getItem === 'function' ? items.getItem(index) : items[index];
        let template;
        if (args.view) {
            if (NativeScriptDebug.isLogEnabled()) {
                NativeScriptDebug.listViewLog(`onItemLoading: ${index} - Reusing existing view`);
            }
            let templateKey = this._viewToTemplate.get(args.view);
            if (!templateKey && args.view instanceof LayoutBase && args.view.getChildrenCount() > 0) {
                templateKey = this._viewToTemplate.get(args.view.getChildAt(0));
            }
            if (!templateKey) {
                // this template was not created by us
                if (NativeScriptDebug.isLogEnabled()) {
                    NativeScriptDebug.listViewError(`ViewReference not found for item ${index}. View recycling is not working`);
                }
                return;
            }
            template = this._templateMap.get(templateKey);
            template.update(args.view, { index, data: currentItem });
        }
        else {
            // this should never enter if it creates the view
            const templateKey = typeof lview.itemTemplateSelector === 'function' ? lview.itemTemplateSelector(currentItem, index, items) : 'default';
            template = this._templateMap.get(templateKey);
            if (!template) {
                if (NativeScriptDebug.isLogEnabled()) {
                    NativeScriptDebug.listViewError(`Template for key '${templateKey}' not found.`);
                }
                return;
            }
            args.view = template.create({ index, data: currentItem });
        }
        this.setupViewRef(template.getEmbeddedViewRef(args.view), currentItem, index, args.view);
        template.attach(args.view);
        this._changeDetectorRef.detectChanges();
    }
    setupViewRef(viewRef, data, index, nativeElement) {
        const context = viewRef.context;
        this.setupItemView.next({ view: viewRef, nativeElement, data: data, index: index, context: context });
    }
    ngDoCheck() {
        if (this._differ) {
            if (NativeScriptDebug.isLogEnabled()) {
                NativeScriptDebug.listViewLog('ngDoCheck() - execute differ');
            }
            const changes = this._differ.diff(this._items);
            if (changes) {
                if (NativeScriptDebug.isLogEnabled()) {
                    NativeScriptDebug.listViewLog('ngDoCheck() - refresh');
                }
                this.templatedItemsView.refresh();
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: ListViewComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.1", type: ListViewComponent, selector: "ListView", inputs: { items: "items" }, outputs: { setupItemView: "setupItemView" }, host: { listeners: { "itemLoading": "onItemLoading($event)" } }, providers: [{ provide: TEMPLATED_ITEMS_COMPONENT, useExisting: forwardRef(() => ListViewComponent) }], queries: [{ propertyName: "itemTemplateQuery", first: true, predicate: TemplateRef, descendants: true, read: TemplateRef }], viewQueries: [{ propertyName: "loader", first: true, predicate: ["loader"], descendants: true, read: ViewContainerRef, static: true }], ngImport: i0, template: `<DetachedContainer>
    <ng-container #loader></ng-container>
  </DetachedContainer>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
__decorate([
    profile,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], ListViewComponent.prototype, "onItemLoading", null);
export { ListViewComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: ListViewComponent, decorators: [{
            type: Component,
            args: [{
                    // eslint-disable-next-line @angular-eslint/component-selector
                    selector: 'ListView',
                    template: `<DetachedContainer>
    <ng-container #loader></ng-container>
  </DetachedContainer>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: TEMPLATED_ITEMS_COMPONENT, useExisting: forwardRef(() => ListViewComponent) }],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { loader: [{
                type: ViewChild,
                args: ['loader', { read: ViewContainerRef, static: true }]
            }], setupItemView: [{
                type: Output
            }], itemTemplateQuery: [{
                type: ContentChild,
                args: [TemplateRef, { read: TemplateRef, static: false }]
            }], items: [{
                type: Input
            }], onItemLoading: [{
                type: HostListener,
                args: ['itemLoading', ['$event']]
            }] } });
export function getItemViewRoot(viewRef, rootLocator = extractSingleViewRecursive) {
    const rootView = rootLocator(viewRef.rootNodes, 0);
    return rootView;
}
// eslint-disable-next-line @angular-eslint/directive-selector
class TemplateKeyDirective {
    constructor(templateRef, comp) {
        this.templateRef = templateRef;
        this.comp = comp;
    }
    set nsTemplateKey(value) {
        if (this.comp && this.templateRef) {
            this.comp.registerTemplate(value, this.templateRef);
        }
    }
    set nsTemplateKeys(values) {
        // single template with multiple keys
        if (this.comp && this.templateRef && values) {
            values.forEach((value) => this.comp.registerTemplate(value, this.templateRef));
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: TemplateKeyDirective, deps: [{ token: i0.TemplateRef }, { token: TEMPLATED_ITEMS_COMPONENT, host: true }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.0.1", type: TemplateKeyDirective, selector: "[nsTemplateKey],[nsTemplateKeys]", inputs: { nsTemplateKey: "nsTemplateKey", nsTemplateKeys: "nsTemplateKeys" }, ngImport: i0 }); }
}
export { TemplateKeyDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: TemplateKeyDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[nsTemplateKey],[nsTemplateKeys]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: undefined, decorators: [{
                    type: Host
                }, {
                    type: Inject,
                    args: [TEMPLATED_ITEMS_COMPONENT]
                }] }]; }, propDecorators: { nsTemplateKey: [{
                type: Input
            }], nsTemplateKeys: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,