import { ViewportScroller, XhrFactory, ɵNullViewportScroller as NullViewportScroller } from '@angular/common';
import { ApplicationModule, ErrorHandler, Inject, NgModule, NO_ERRORS_SCHEMA, Optional, RendererFactory2, SkipSelf, ɵINJECTOR_SCOPE as INJECTOR_SCOPE } from '@angular/core';
import { Color, Device } from '@nativescript/core';
import { AppHostView } from './app-host-view';
import { NativescriptXhrFactory } from './nativescript-xhr-factory';
import { NativeScriptRendererFactory } from './nativescript-renderer';
import { PlatformNamespaceFilter, NAMESPACE_FILTERS } from './property-filter';
import { APP_ROOT_VIEW, DEVICE, ENABLE_REUSABE_VIEWS, NATIVESCRIPT_ROOT_MODULE_ID } from './tokens';
import { ViewUtil } from './view-util';
import { DetachedLoader } from './cdk/detached-loader';
import { NativeScriptCommonModule } from './nativescript-common.module';
import * as i0 from "@angular/core";
export function generateFallbackRootView(parentRootView) {
    if (parentRootView) {
        return parentRootView;
    }
    return new AppHostView(new Color('white'));
}
export function errorHandler() {
    return new ErrorHandler();
}
export function generateRandomId() {
    return `${Date.now()}` + '_' + Math.random().toString(36).substr(2, 9);
}
export const NATIVESCRIPT_MODULE_STATIC_PROVIDERS = [
    { provide: APP_ROOT_VIEW, useFactory: generateFallbackRootView, deps: [[new Optional(), new SkipSelf(), APP_ROOT_VIEW]] },
    { provide: INJECTOR_SCOPE, useValue: 'root' },
    { provide: ErrorHandler, useFactory: errorHandler, deps: [] },
    { provide: ViewUtil, useClass: ViewUtil, deps: [NAMESPACE_FILTERS, [new Optional(), ENABLE_REUSABE_VIEWS]] },
    {
        provide: NativeScriptRendererFactory,
        useClass: NativeScriptRendererFactory,
        deps: [APP_ROOT_VIEW, NAMESPACE_FILTERS, NATIVESCRIPT_ROOT_MODULE_ID, [new Optional(), ENABLE_REUSABE_VIEWS]],
    },
    { provide: NATIVESCRIPT_ROOT_MODULE_ID, useFactory: generateRandomId },
    { provide: RendererFactory2, useExisting: NativeScriptRendererFactory },
    { provide: NAMESPACE_FILTERS, useClass: PlatformNamespaceFilter, deps: [DEVICE], multi: true },
    { provide: DEVICE, useValue: Device },
    { provide: XhrFactory, useClass: NativescriptXhrFactory, deps: [] },
];
export const NATIVESCRIPT_MODULE_PROVIDERS = [{ provide: ViewportScroller, useClass: NullViewportScroller }];
class NativeScriptModule {
    constructor(parentModule) {
        if (parentModule) {
            throw new Error(`NativeScriptModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.`);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: NativeScriptModule, deps: [{ token: NativeScriptModule, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.0.1", ngImport: i0, type: NativeScriptModule, declarations: [DetachedLoader], imports: [ApplicationModule, NativeScriptCommonModule], exports: [ApplicationModule, DetachedLoader, NativeScriptCommonModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: NativeScriptModule, providers: [...NATIVESCRIPT_MODULE_STATIC_PROVIDERS, ...NATIVESCRIPT_MODULE_PROVIDERS], imports: [ApplicationModule, NativeScriptCommonModule, ApplicationModule, NativeScriptCommonModule] }); }
}
export { NativeScriptModule };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: NativeScriptModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [ApplicationModule, NativeScriptCommonModule],
                    declarations: [DetachedLoader],
                    providers: [...NATIVESCRIPT_MODULE_STATIC_PROVIDERS, ...NATIVESCRIPT_MODULE_PROVIDERS],
                    exports: [ApplicationModule, DetachedLoader, NativeScriptCommonModule],
                    schemas: [NO_ERRORS_SCHEMA],
                }]
        }], ctorParameters: function () { return [{ type: NativeScriptModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }, {
                    type: Inject,
                    args: [NativeScriptModule]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlc2NyaXB0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvYW5ndWxhci9zcmMvbGliL25hdGl2ZXNjcmlwdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLHFCQUFxQixJQUFJLG9CQUFvQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUcsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBWSxnQkFBZ0IsRUFBRSxRQUFRLEVBQWtCLGVBQWUsSUFBSSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdk0sT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQVEsTUFBTSxvQkFBb0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdEUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDL0UsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsb0JBQW9CLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDcEcsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN2QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdkQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sOEJBQThCLENBQUM7O0FBRXhFLE1BQU0sVUFBVSx3QkFBd0IsQ0FBQyxjQUFxQjtJQUM1RCxJQUFJLGNBQWMsRUFBRTtRQUNsQixPQUFPLGNBQWMsQ0FBQztLQUN2QjtJQUNELE9B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Q0FBb0MsRUFBRSxHQUFHLDZCQUE2QixDQUFDO29CQUN0RixPQUFPLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxjQUFjLEVBQUUsd0JBQXdCLENBQUM7b0JBQ3RFLE9BQU8sRUFBRSxDQUFDLGdCQUFnQixDQUFDO2lCQUM1Qjs7MEJBRWMsUUFBUTs7MEJBQUksUUFBUTs7MEJBQUksTUFBTTsyQkFBQyxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWaWV3cG9ydFNjcm9sbGVyLCBYaHJGYWN0b3J5LCDJtU51bGxWaWV3cG9ydFNjcm9sbGVyIGFzIE51bGxWaWV3cG9ydFNjcm9sbGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEFwcGxpY2F0aW9uTW9kdWxlLCBFcnJvckhhbmRsZXIsIEluamVjdCwgTmdNb2R1bGUsIE5PX0VSUk9SU19TQ0hFTUEsIE9wdGlvbmFsLCBQcm92aWRlciwgUmVuZGVyZXJGYWN0b3J5MiwgU2tpcFNlbGYsIFN0YXRpY1Byb3ZpZGVyLCDJtUlOSkVDVE9SX1NDT1BFIGFzIElOSkVDVE9SX1NDT1BFIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb2xvciwgRGV2aWNlLCBWaWV3IH0gZnJvbSAnQG5hdGl2ZXNjcmlwdC9jb3JlJztcbmltcG9ydCB7IEFwcEhvc3RWaWV3IH0gZnJvbSAnLi9hcHAtaG9zdC12aWV3JztcbmltcG9ydCB7IE5hdGl2ZXNjcmlwdFhockZhY3RvcnkgfSBmcm9tICcuL25hdGl2ZXNjcmlwdC14aHItZmFjdG9yeSc7XG5pbXBvcnQgeyBOYXRpdmVTY3JpcHRSZW5kZXJlckZhY3RvcnkgfSBmcm9tICcuL25hdGl2ZXNjcmlwdC1yZW5kZXJlcic7XG5pbXBvcnQgeyBQbGF0Zm9ybU5hbWVzcGFjZUZpbHRlciwgTkFNRVNQQUNFX0ZJTFRFUlMgfSBmcm9tICcuL3Byb3BlcnR5LWZpbHRlcic7XG5pbXBvcnQgeyBBUFBfUk9PVF9WSUVXLCBERVZJQ0UsIEVOQUJMRV9SRVVTQUJFX1ZJRVdTLCBOQVRJVkVTQ1JJUFRfUk9PVF9NT0RVTEVfSUQgfSBmcm9tICcuL3Rva2Vucyc7XG5pbXBvcnQgeyBWaWV3VXRpbCB9IGZyb20gJy4vdmlldy11dGlsJztcbmltcG9ydCB7IERldGFjaGVkTG9hZGVyIH0gZnJvbSAnLi9jZGsvZGV0YWNoZWQtbG9hZGVyJztcbmltcG9ydCB7IE5hdGl2ZVNjcmlwdENvbW1vbk1vZHVsZSB9IGZyb20gJy4vbmF0aXZlc2NyaXB0LWNvbW1vbi5tb2R1bGUnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVGYWxsYmFja1Jvb3RWaWV3KHBhcmVudFJvb3RWaWV3PzogVmlldykge1xuICBpZiAocGFyZW50Um9vdFZpZXcpIHtcbiAgICByZXR1cm4gcGFyZW50Um9vdFZpZXc7XG4gIH1cbiAgcmV0dXJuIG5ldyBBcHBIb3N0VmlldyhuZXcgQ29sb3IoJ3doaXRlJykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXJyb3JIYW5kbGVyKCkge1xuICByZXR1cm4gbmV3IEVycm9ySGFuZGxlcigpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlUmFuZG9tSWQoKSB7XG4gIHJldHVybiBgJHtEYXRlLm5vdygpfWAgKyAnXycgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSk7XG59XG5cbmV4cG9ydCBjb25zdCBOQVRJVkVTQ1JJUFRfTU9EVUxFX1NUQVRJQ19QUk9WSURFUlM6IFN0YXRpY1Byb3ZpZGVyW10gPSBbXG4gIHsgcHJvdmlkZTogQVBQX1JPT1RfVklFVywgdXNlRmFjdG9yeTogZ2VuZXJhdGVGYWxsYmFja1Jvb3RWaWV3LCBkZXBzOiBbW25ldyBPcHRpb25hbCgpLCBuZXcgU2tpcFNlbGYoKSwgQVBQX1JPT1RfVklFV11dIH0sXG4gIHsgcHJvdmlkZTogSU5KRUNUT1JfU0NPUEUsIHVzZVZhbHVlOiAncm9vdCcgfSxcbiAgeyBwcm92aWRlOiBFcnJvckhhbmRsZXIsIHVzZUZhY3Rvcnk6IGVycm9ySGFuZGxlciwgZGVwczogW10gfSxcbiAgeyBwcm92aWRlOiBWaWV3VXRpbCwgdXNlQ2xhc3M6IFZpZXdVdGlsLCBkZXBzOiBbTkFNRVNQQUNFX0ZJTFRFUlMsIFtuZXcgT3B0aW9uYWwoKSwgRU5BQkxFX1JFVVNBQkVfVklFV1NdXSB9LFxuICB7XG4gICAgcHJvdmlkZTogTmF0aXZlU2NyaXB0UmVuZGVyZXJGYWN0b3J5LFxuICAgIHVzZUNsYXNzOiBOYXRpdmVTY3JpcHRSZW5kZXJlckZhY3RvcnksXG4gICAgZGVwczogW0FQUF9ST09UX1ZJRVcsIE5BTUVTUEFDRV9GSUxURVJTLCBOQVRJVkVTQ1JJUFRfUk9PVF9NT0RVTEVfSUQsIFtuZXcgT3B0aW9uYWwoKSwgRU5BQkxFX1JFVVNBQkVfVklFV1NdXSxcbiAgfSxcbiAgeyBwcm92aWRlOiBOQVRJVkVTQ1JJUFRfUk9PVF9NT0RVTEVfSUQsIHVzZUZhY3Rvcnk6IGdlbmVyYXRlUmFuZG9tSWQgfSxcbiAgeyBwcm92aWRlOiBSZW5kZXJlckZhY3RvcnkyLCB1c2VFeGlzdGluZzogTmF0aXZlU2NyaXB0UmVuZGVyZXJGYWN0b3J5IH0sXG4gIHsgcHJvdmlkZTogTkFNRVNQQUNFX0ZJTFRFUlMsIHVzZUNsYXNzOiBQbGF0Zm9ybU5hbWVzcGFjZUZpbHRlciwgZGVwczogW0RFVklDRV0sIG11bHRpOiB0cnVlIH0sXG4gIHsgcHJvdmlkZTogREVWSUNFLCB1c2VWYWx1ZTogRGV2aWNlIH0sXG4gIHsgcHJvdmlkZTogWGhyRmFjdG9yeSwgdXNlQ2xhc3M6IE5hdGl2ZXNjcmlwdFhockZhY3RvcnksIGRlcHM6IFtdIH0sXG5dO1xuZXhwb3J0IGNvbnN0IE5BVElWRVNDUklQVF9NT0RVTEVfUFJPVklERVJTOiBQcm92aWRlcltdID0gW3sgcHJvdmlkZTogVmlld3BvcnRTY3JvbGxlciwgdXNlQ2xhc3M6IE51bGxWaWV3cG9ydFNjcm9sbGVyIH1dO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQXBwbGljYXRpb25Nb2R1bGUsIE5hdGl2ZVNjcmlwdENvbW1vbk1vZHVsZV0sXG4gIGRlY2xhcmF0aW9uczogW0RldGFjaGVkTG9hZGVyXSxcbiAgcHJvdmlkZXJzOiBbLi4uTkFUSVZFU0NSSVBUX01PRFVMRV9TVEFUSUNfUFJPVklERVJTLCAuLi5OQVRJVkVTQ1JJUFRfTU9EVUxFX1BST1ZJREVSU10sXG4gIGV4cG9ydHM6IFtBcHBsaWNhdGlvbk1vZHVsZSwgRGV0YWNoZWRMb2FkZXIsIE5hdGl2ZVNjcmlwdENvbW1vbk1vZHVsZV0sXG4gIHNjaGVtYXM6IFtOT19FUlJPUlNfU0NIRU1BXSxcbn0pXG5leHBvcnQgY2xhc3MgTmF0aXZlU2NyaXB0TW9kdWxlIHtcbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQFNraXBTZWxmKCkgQEluamVjdChOYXRpdmVTY3JpcHRNb2R1bGUpIHBhcmVudE1vZHVsZTogTmF0aXZlU2NyaXB0TW9kdWxlIHwgbnVsbCkge1xuICAgIGlmIChwYXJlbnRNb2R1bGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTmF0aXZlU2NyaXB0TW9kdWxlIGhhcyBhbHJlYWR5IGJlZW4gbG9hZGVkLiBJZiB5b3UgbmVlZCBhY2Nlc3MgdG8gY29tbW9uIGRpcmVjdGl2ZXMgc3VjaCBhcyBOZ0lmIGFuZCBOZ0ZvciBmcm9tIGEgbGF6eSBsb2FkZWQgbW9kdWxlLCBpbXBvcnQgQ29tbW9uTW9kdWxlIGluc3RlYWQuYCk7XG4gICAgfVxuICB9XG59XG4iXX0=