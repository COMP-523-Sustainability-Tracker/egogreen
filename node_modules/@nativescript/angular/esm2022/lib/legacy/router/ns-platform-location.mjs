import { NSLocationStrategy } from './ns-location-strategy';
import { PlatformLocation } from '@angular/common';
import { Injectable } from '@angular/core';
import { NativeScriptDebug } from '../../trace';
import * as i0 from "@angular/core";
import * as i1 from "./ns-location-strategy";
class NativescriptPlatformLocation extends PlatformLocation {
    constructor(locationStrategy) {
        super();
        this.locationStrategy = locationStrategy;
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.routerLog('NativescriptPlatformLocation.constructor()');
        }
    }
    getState() {
        return undefined;
    }
    getBaseHrefFromDOM() {
        return '/';
    }
    onPopState(fn) {
        this.locationStrategy.onPopState(fn);
        return () => {
            //
        };
    }
    onHashChange(_fn) {
        return () => {
            //
        };
    }
    get search() {
        return '';
    }
    get hash() {
        return '';
    }
    get pathname() {
        return this.locationStrategy.path();
    }
    set pathname(_newPath) {
        throw new Error('NativescriptPlatformLocation set pathname - not implemented');
    }
    pushState(state, title, url) {
        this.locationStrategy.pushState(state, title, url, null);
    }
    replaceState(state, title, url) {
        this.locationStrategy.replaceState(state, title, url, null);
    }
    forward() {
        throw new Error('NativescriptPlatformLocation.forward() - not implemented');
    }
    back() {
        this.locationStrategy.back();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: NativescriptPlatformLocation, deps: [{ token: i1.NSLocationStrategy }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: NativescriptPlatformLocation }); }
}
export { NativescriptPlatformLocation };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: NativescriptPlatformLocation, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.NSLocationStrategy }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnMtcGxhdGZvcm0tbG9jYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9hbmd1bGFyL3NyYy9saWIvbGVnYWN5L3JvdXRlci9ucy1wbGF0Zm9ybS1sb2NhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQTBCLE1BQU0saUJBQWlCLENBQUM7QUFDM0UsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxhQUFhLENBQUM7OztBQUVoRCxNQUNhLDRCQUE2QixTQUFRLGdCQUFnQjtJQU1oRSxZQUFvQixnQkFBb0M7UUFDdEQsS0FBSyxFQUFFLENBQUM7UUFEVSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQW9CO1FBRXRELElBQUksaUJBQWlCLENBQUMsWUFBWSxFQUFFLEVBQUU7WUFDcEMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLDRDQUE0QyxDQUFDLENBQUM7U0FDM0U7SUFDSCxDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRCxrQkFBa0I7UUFDaEIsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRUQsVUFBVSxDQUFDLEVBQTBCO1FBQ25DLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDckMsT0FBTyxHQUFHLEVBQUU7WUFDVixFQUFFO1FBQ0osQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVELFlBQVksQ0FBQyxHQUEyQjtRQUN0QyxPQUFPLEdBQUcsRUFBRTtZQUNWLEVBQUU7UUFDSixDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBQ0QsSUFBSSxJQUFJO1FBQ04sT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBQ0QsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdEMsQ0FBQztJQUNELElBQUksUUFBUSxDQUFDLFFBQWdCO1FBQzNCLE1BQU0sSUFBSSxLQUFLLENBQUMsNkRBQTZELENBQUMsQ0FBQztJQUNqRixDQUFDO0lBRUQsU0FBUyxDQUFDLEtBQVUsRUFBRSxLQUFhLEVBQUUsR0FBVztRQUM5QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRCxZQUFZLENBQUMsS0FBVSxFQUFFLEtBQWEsRUFBRSxHQUFXO1FBQ2pELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVELE9BQU87UUFDTCxNQUFNLElBQUksS0FBSyxDQUFDLDBEQUEwRCxDQUFDLENBQUM7SUFDOUUsQ0FBQztJQUVELElBQUk7UUFDRixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDL0IsQ0FBQzs4R0E3RFUsNEJBQTRCO2tIQUE1Qiw0QkFBNEI7O1NBQTVCLDRCQUE0QjsyRkFBNUIsNEJBQTRCO2tCQUR4QyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlNMb2NhdGlvblN0cmF0ZWd5IH0gZnJvbSAnLi9ucy1sb2NhdGlvbi1zdHJhdGVneSc7XG5pbXBvcnQgeyBQbGF0Zm9ybUxvY2F0aW9uLCBMb2NhdGlvbkNoYW5nZUxpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5hdGl2ZVNjcmlwdERlYnVnIH0gZnJvbSAnLi4vLi4vdHJhY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTmF0aXZlc2NyaXB0UGxhdGZvcm1Mb2NhdGlvbiBleHRlbmRzIFBsYXRmb3JtTG9jYXRpb24ge1xuICByZWFkb25seSBob3N0bmFtZTogc3RyaW5nO1xuICByZWFkb25seSBocmVmOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHBvcnQ6IHN0cmluZztcbiAgcmVhZG9ubHkgcHJvdG9jb2w6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxvY2F0aW9uU3RyYXRlZ3k6IE5TTG9jYXRpb25TdHJhdGVneSkge1xuICAgIHN1cGVyKCk7XG4gICAgaWYgKE5hdGl2ZVNjcmlwdERlYnVnLmlzTG9nRW5hYmxlZCgpKSB7XG4gICAgICBOYXRpdmVTY3JpcHREZWJ1Zy5yb3V0ZXJMb2coJ05hdGl2ZXNjcmlwdFBsYXRmb3JtTG9jYXRpb24uY29uc3RydWN0b3IoKScpO1xuICAgIH1cbiAgfVxuXG4gIGdldFN0YXRlKCk6IGFueSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGdldEJhc2VIcmVmRnJvbURPTSgpOiBzdHJpbmcge1xuICAgIHJldHVybiAnLyc7XG4gIH1cblxuICBvblBvcFN0YXRlKGZuOiBMb2NhdGlvbkNoYW5nZUxpc3RlbmVyKTogVm9pZEZ1bmN0aW9uIHtcbiAgICB0aGlzLmxvY2F0aW9uU3RyYXRlZ3kub25Qb3BTdGF0ZShmbik7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIC8vXG4gICAgfTtcbiAgfVxuXG4gIG9uSGFzaENoYW5nZShfZm46IExvY2F0aW9uQ2hhbmdlTGlzdGVuZXIpOiBWb2lkRnVuY3Rpb24ge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAvL1xuICAgIH07XG4gIH1cblxuICBnZXQgc2VhcmNoKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIGdldCBoYXNoKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIGdldCBwYXRobmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmxvY2F0aW9uU3RyYXRlZ3kucGF0aCgpO1xuICB9XG4gIHNldCBwYXRobmFtZShfbmV3UGF0aDogc3RyaW5nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOYXRpdmVzY3JpcHRQbGF0Zm9ybUxvY2F0aW9uIHNldCBwYXRobmFtZSAtIG5vdCBpbXBsZW1lbnRlZCcpO1xuICB9XG5cbiAgcHVzaFN0YXRlKHN0YXRlOiBhbnksIHRpdGxlOiBzdHJpbmcsIHVybDogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5sb2NhdGlvblN0cmF0ZWd5LnB1c2hTdGF0ZShzdGF0ZSwgdGl0bGUsIHVybCwgbnVsbCk7XG4gIH1cblxuICByZXBsYWNlU3RhdGUoc3RhdGU6IGFueSwgdGl0bGU6IHN0cmluZywgdXJsOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmxvY2F0aW9uU3RyYXRlZ3kucmVwbGFjZVN0YXRlKHN0YXRlLCB0aXRsZSwgdXJsLCBudWxsKTtcbiAgfVxuXG4gIGZvcndhcmQoKTogdm9pZCB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOYXRpdmVzY3JpcHRQbGF0Zm9ybUxvY2F0aW9uLmZvcndhcmQoKSAtIG5vdCBpbXBsZW1lbnRlZCcpO1xuICB9XG5cbiAgYmFjaygpOiB2b2lkIHtcbiAgICB0aGlzLmxvY2F0aW9uU3RyYXRlZ3kuYmFjaygpO1xuICB9XG59XG4iXX0=