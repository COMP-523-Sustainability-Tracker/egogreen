import { NgModule } from '@angular/core';
import { Application, ContentView, RootLayout } from '@nativescript/core';
import { APP_ROOT_VIEW, DISABLE_ROOT_VIEW_HANDLING } from './tokens';
import * as i0 from "@angular/core";
export class RootViewProxy extends ContentView {
    constructor(parentRootLayout) {
        super();
        this.parentRootLayout = parentRootLayout;
    }
    _addView(view, atIndex) {
        super._addView(view, atIndex);
        if (this.parentRootLayout.getChildIndex(this) < 0) {
            this.parentRootLayout.insertChild(this, 0);
        }
    }
    _removeView(view) {
        super._removeView(view);
        this.parentRootLayout.removeChild(this);
    }
}
/**
 * This generates a RootLayout and returns a RootViewProxy.
 * Setting RootViewProxy.content will add the view to the bottom of the RootLayout
 * Setting RootViewProxy.content = null will remove the view from the RootLayout
 * @returns RootViewProxy that will insert content into the start of the RootLayout
 */
export function generateRootLayoutAndProxy() {
    let rootView = Application.getRootView();
    if (!rootView || !(rootView instanceof RootLayout)) {
        rootView = new RootLayout();
        Application.resetRootView({ create: () => rootView });
    }
    const viewProxy = new RootViewProxy(rootView);
    // (rootView as RootLayout).insertChild(viewProxy, 0);
    return viewProxy;
}
class RootCompositeModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: RootCompositeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.0.1", ngImport: i0, type: RootCompositeModule }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: RootCompositeModule, providers: [
            { provide: DISABLE_ROOT_VIEW_HANDLING, useValue: true },
            { provide: APP_ROOT_VIEW, useFactory: generateRootLayoutAndProxy },
        ] }); }
}
export { RootCompositeModule };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: RootCompositeModule, decorators: [{
            type: NgModule,
            args: [{
                    providers: [
                        { provide: DISABLE_ROOT_VIEW_HANDLING, useValue: true },
                        { provide: APP_ROOT_VIEW, useFactory: generateRootLayoutAndProxy },
                    ],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9vdGNvbXBvc2l0ZS5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9hbmd1bGFyL3NyYy9saWIvcm9vdGNvbXBvc2l0ZS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQVEsTUFBTSxvQkFBb0IsQ0FBQztBQUNoRixPQUFPLEVBQUUsYUFBYSxFQUFFLDBCQUEwQixFQUFFLE1BQU0sVUFBVSxDQUFDOztBQUVyRSxNQUFNLE9BQU8sYUFBYyxTQUFRLFdBQVc7SUFDNUMsWUFBb0IsZ0JBQTRCO1FBQzlDLEtBQUssRUFBRSxDQUFDO1FBRFUscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFZO0lBRWhELENBQUM7SUFFRCxRQUFRLENBQUMsSUFBVSxFQUFFLE9BQWdCO1FBQ25DLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzlCLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDakQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDNUM7SUFDSCxDQUFDO0lBRUQsV0FBVyxDQUFDLElBQVU7UUFDcEIsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFDLENBQUM7Q0FDRjtBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLDBCQUEwQjtJQUN4QyxJQUFJLFFBQVEsR0FBRyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDekMsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLENBQUMsUUFBUSxZQUFZLFVBQVUsQ0FBQyxFQUFFO1FBQ2xELFFBQVEsR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFDO1FBQzVCLFdBQVcsQ0FBQyxhQUFhLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN2RDtJQUNELE1BQU0sU0FBUyxHQUFHLElBQUksYUFBYSxDQUFDLFFBQXNCLENBQUMsQ0FBQztJQUM1RCxzREFBc0Q7SUFDdEQsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQztBQUVELE1BTWEsbUJBQW1COzhHQUFuQixtQkFBbUI7K0dBQW5CLG1CQUFtQjsrR0FBbkIsbUJBQW1CLGFBTG5CO1lBQ1QsRUFBRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRTtZQUN2RCxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLDBCQUEwQixFQUFFO1NBQ25FOztTQUVVLG1CQUFtQjsyRkFBbkIsbUJBQW1CO2tCQU4vQixRQUFRO21CQUFDO29CQUNSLFNBQVMsRUFBRTt3QkFDVCxFQUFFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO3dCQUN2RCxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLDBCQUEwQixFQUFFO3FCQUNuRTtpQkFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBcHBsaWNhdGlvbiwgQ29udGVudFZpZXcsIFJvb3RMYXlvdXQsIFZpZXcgfSBmcm9tICdAbmF0aXZlc2NyaXB0L2NvcmUnO1xuaW1wb3J0IHsgQVBQX1JPT1RfVklFVywgRElTQUJMRV9ST09UX1ZJRVdfSEFORExJTkcgfSBmcm9tICcuL3Rva2Vucyc7XG5cbmV4cG9ydCBjbGFzcyBSb290Vmlld1Byb3h5IGV4dGVuZHMgQ29udGVudFZpZXcge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBhcmVudFJvb3RMYXlvdXQ6IFJvb3RMYXlvdXQpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgX2FkZFZpZXcodmlldzogVmlldywgYXRJbmRleD86IG51bWJlcikge1xuICAgIHN1cGVyLl9hZGRWaWV3KHZpZXcsIGF0SW5kZXgpO1xuICAgIGlmICh0aGlzLnBhcmVudFJvb3RMYXlvdXQuZ2V0Q2hpbGRJbmRleCh0aGlzKSA8IDApIHtcbiAgICAgIHRoaXMucGFyZW50Um9vdExheW91dC5pbnNlcnRDaGlsZCh0aGlzLCAwKTtcbiAgICB9XG4gIH1cblxuICBfcmVtb3ZlVmlldyh2aWV3OiBWaWV3KSB7XG4gICAgc3VwZXIuX3JlbW92ZVZpZXcodmlldyk7XG4gICAgdGhpcy5wYXJlbnRSb290TGF5b3V0LnJlbW92ZUNoaWxkKHRoaXMpO1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBnZW5lcmF0ZXMgYSBSb290TGF5b3V0IGFuZCByZXR1cm5zIGEgUm9vdFZpZXdQcm94eS5cbiAqIFNldHRpbmcgUm9vdFZpZXdQcm94eS5jb250ZW50IHdpbGwgYWRkIHRoZSB2aWV3IHRvIHRoZSBib3R0b20gb2YgdGhlIFJvb3RMYXlvdXRcbiAqIFNldHRpbmcgUm9vdFZpZXdQcm94eS5jb250ZW50ID0gbnVsbCB3aWxsIHJlbW92ZSB0aGUgdmlldyBmcm9tIHRoZSBSb290TGF5b3V0XG4gKiBAcmV0dXJucyBSb290Vmlld1Byb3h5IHRoYXQgd2lsbCBpbnNlcnQgY29udGVudCBpbnRvIHRoZSBzdGFydCBvZiB0aGUgUm9vdExheW91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVSb290TGF5b3V0QW5kUHJveHkoKSB7XG4gIGxldCByb290VmlldyA9IEFwcGxpY2F0aW9uLmdldFJvb3RWaWV3KCk7XG4gIGlmICghcm9vdFZpZXcgfHwgIShyb290VmlldyBpbnN0YW5jZW9mIFJvb3RMYXlvdXQpKSB7XG4gICAgcm9vdFZpZXcgPSBuZXcgUm9vdExheW91dCgpO1xuICAgIEFwcGxpY2F0aW9uLnJlc2V0Um9vdFZpZXcoeyBjcmVhdGU6ICgpID0+IHJvb3RWaWV3IH0pO1xuICB9XG4gIGNvbnN0IHZpZXdQcm94eSA9IG5ldyBSb290Vmlld1Byb3h5KHJvb3RWaWV3IGFzIFJvb3RMYXlvdXQpO1xuICAvLyAocm9vdFZpZXcgYXMgUm9vdExheW91dCkuaW5zZXJ0Q2hpbGQodmlld1Byb3h5LCAwKTtcbiAgcmV0dXJuIHZpZXdQcm94eTtcbn1cblxuQE5nTW9kdWxlKHtcbiAgcHJvdmlkZXJzOiBbXG4gICAgeyBwcm92aWRlOiBESVNBQkxFX1JPT1RfVklFV19IQU5ETElORywgdXNlVmFsdWU6IHRydWUgfSxcbiAgICB7IHByb3ZpZGU6IEFQUF9ST09UX1ZJRVcsIHVzZUZhY3Rvcnk6IGdlbmVyYXRlUm9vdExheW91dEFuZFByb3h5IH0sXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIFJvb3RDb21wb3NpdGVNb2R1bGUge31cbiJdfQ==