import { Directive, ElementRef, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { BaseValueAccessor } from './base-value-accessor';
import * as i0 from "@angular/core";
const TEXT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => TextValueAccessor),
    multi: true,
};
/**
 * The accessor for writing a text and listening to changes that is used by the
 * {@link NgModel} directives.
 *
 *  ### Example
 *  ```
 *  <TextField [(ngModel)]="model.test">
 *  ```
 */
class TextValueAccessor extends BaseValueAccessor {
    // tslint:disable-line:directive-class-suffix
    constructor(elementRef) {
        super(elementRef.nativeElement);
    }
    writeValue(value) {
        const normalized = super.normalizeValue(value ? `${value}` : value);
        this.view.text = normalized;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: TextValueAccessor, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.0.1", type: TextValueAccessor, selector: "TextField[ngModel],TextField[formControlName],TextField[formControl],textField[ngModel],textField[formControlName],textField[formControl],textfield[ngModel],textfield[formControlName],textfield[formControl],text-field[ngModel],text-field[formControlName],text-field[formControl],TextView[ngModel],TextView[formControlName],TextView[formControl],textView[ngModel],textView[formControlName],textView[formControl],textview[ngModel],textview[formControlName],textview[formControl],text-view[ngModel],text-view[formControlName],text-view[formControl],SearchBar[ngModel],SearchBar[formControlName],SearchBar[formControl],searchBar[ngModel],searchBar[formControlName],searchBar[formControl],searchbar[ngModel],searchbar[formControlName],searchbar[formControl],search-bar[ngModel], search-bar[formControlName],search-bar[formControl]", host: { listeners: { "blur": "onTouched()", "textChange": "onChange($event.value)" } }, providers: [TEXT_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 }); }
}
export { TextValueAccessor };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: TextValueAccessor, decorators: [{
            type: Directive,
            args: [{
                    selector: 'TextField[ngModel],TextField[formControlName],TextField[formControl],' +
                        'textField[ngModel],textField[formControlName],textField[formControl],' +
                        'textfield[ngModel],textfield[formControlName],textfield[formControl],' +
                        'text-field[ngModel],text-field[formControlName],text-field[formControl],' +
                        'TextView[ngModel],TextView[formControlName],TextView[formControl],' +
                        'textView[ngModel],textView[formControlName],textView[formControl],' +
                        'textview[ngModel],textview[formControlName],textview[formControl],' +
                        'text-view[ngModel],text-view[formControlName],text-view[formControl],' +
                        'SearchBar[ngModel],SearchBar[formControlName],SearchBar[formControl],' +
                        'searchBar[ngModel],searchBar[formControlName],searchBar[formControl],' +
                        'searchbar[ngModel],searchbar[formControlName],searchbar[formControl],' +
                        'search-bar[ngModel], search-bar[formControlName],search-bar[formControl]',
                    providers: [TEXT_VALUE_ACCESSOR],
                    // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                    host: {
                        '(blur)': 'onTouched()',
                        '(textChange)': 'onChange($event.value)',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC12YWx1ZS1hY2Nlc3Nvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2FuZ3VsYXIvc3JjL2xpYi9mb3Jtcy92YWx1ZS1hY2Nlc3NvcnMvdGV4dC12YWx1ZS1hY2Nlc3Nvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFbkQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7O0FBRTFELE1BQU0sbUJBQW1CLEdBQUc7SUFDMUIsT0FBTyxFQUFFLGlCQUFpQjtJQUMxQixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDO0lBQ2hELEtBQUssRUFBRSxJQUFJO0NBQ1osQ0FBQztBQUlGOzs7Ozs7OztHQVFHO0FBQ0gsTUFxQmEsaUJBQWtCLFNBQVEsaUJBQTJCO0lBQ2hFLDZDQUE2QztJQUM3QyxZQUFZLFVBQXNCO1FBQ2hDLEtBQUssQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELFVBQVUsQ0FBQyxLQUFVO1FBQ25CLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUM7SUFDOUIsQ0FBQzs4R0FUVSxpQkFBaUI7a0dBQWpCLGlCQUFpQiw0NkJBUGpCLENBQUMsbUJBQW1CLENBQUM7O1NBT3JCLGlCQUFpQjsyRkFBakIsaUJBQWlCO2tCQXJCN0IsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQ04sdUVBQXVFO3dCQUN2RSx1RUFBdUU7d0JBQ3ZFLHVFQUF1RTt3QkFDdkUsMEVBQTBFO3dCQUMxRSxvRUFBb0U7d0JBQ3BFLG9FQUFvRTt3QkFDcEUsb0VBQW9FO3dCQUNwRSx1RUFBdUU7d0JBQ3ZFLHVFQUF1RTt3QkFDdkUsdUVBQXVFO3dCQUN2RSx1RUFBdUU7d0JBQ3ZFLDBFQUEwRTtvQkFDNUUsU0FBUyxFQUFFLENBQUMsbUJBQW1CLENBQUM7b0JBQ2hDLHFFQUFxRTtvQkFDckUsSUFBSSxFQUFFO3dCQUNKLFFBQVEsRUFBRSxhQUFhO3dCQUN2QixjQUFjLEVBQUUsd0JBQXdCO3FCQUN6QztpQkFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgZm9yd2FyZFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSAnQG5hdGl2ZXNjcmlwdC9jb3JlJztcbmltcG9ydCB7IEJhc2VWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnLi9iYXNlLXZhbHVlLWFjY2Vzc29yJztcblxuY29uc3QgVEVYVF9WQUxVRV9BQ0NFU1NPUiA9IHtcbiAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFRleHRWYWx1ZUFjY2Vzc29yKSxcbiAgbXVsdGk6IHRydWUsXG59O1xuXG5leHBvcnQgdHlwZSBUZXh0VmlldyA9IHsgdGV4dDogc3RyaW5nIH0gJiBWaWV3O1xuXG4vKipcbiAqIFRoZSBhY2Nlc3NvciBmb3Igd3JpdGluZyBhIHRleHQgYW5kIGxpc3RlbmluZyB0byBjaGFuZ2VzIHRoYXQgaXMgdXNlZCBieSB0aGVcbiAqIHtAbGluayBOZ01vZGVsfSBkaXJlY3RpdmVzLlxuICpcbiAqICAjIyMgRXhhbXBsZVxuICogIGBgYFxuICogIDxUZXh0RmllbGQgWyhuZ01vZGVsKV09XCJtb2RlbC50ZXN0XCI+XG4gKiAgYGBgXG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjpcbiAgICAnVGV4dEZpZWxkW25nTW9kZWxdLFRleHRGaWVsZFtmb3JtQ29udHJvbE5hbWVdLFRleHRGaWVsZFtmb3JtQ29udHJvbF0sJyArXG4gICAgJ3RleHRGaWVsZFtuZ01vZGVsXSx0ZXh0RmllbGRbZm9ybUNvbnRyb2xOYW1lXSx0ZXh0RmllbGRbZm9ybUNvbnRyb2xdLCcgK1xuICAgICd0ZXh0ZmllbGRbbmdNb2RlbF0sdGV4dGZpZWxkW2Zvcm1Db250cm9sTmFtZV0sdGV4dGZpZWxkW2Zvcm1Db250cm9sXSwnICtcbiAgICAndGV4dC1maWVsZFtuZ01vZGVsXSx0ZXh0LWZpZWxkW2Zvcm1Db250cm9sTmFtZV0sdGV4dC1maWVsZFtmb3JtQ29udHJvbF0sJyArXG4gICAgJ1RleHRWaWV3W25nTW9kZWxdLFRleHRWaWV3W2Zvcm1Db250cm9sTmFtZV0sVGV4dFZpZXdbZm9ybUNvbnRyb2xdLCcgK1xuICAgICd0ZXh0Vmlld1tuZ01vZGVsXSx0ZXh0Vmlld1tmb3JtQ29udHJvbE5hbWVdLHRleHRWaWV3W2Zvcm1Db250cm9sXSwnICtcbiAgICAndGV4dHZpZXdbbmdNb2RlbF0sdGV4dHZpZXdbZm9ybUNvbnRyb2xOYW1lXSx0ZXh0dmlld1tmb3JtQ29udHJvbF0sJyArXG4gICAgJ3RleHQtdmlld1tuZ01vZGVsXSx0ZXh0LXZpZXdbZm9ybUNvbnRyb2xOYW1lXSx0ZXh0LXZpZXdbZm9ybUNvbnRyb2xdLCcgK1xuICAgICdTZWFyY2hCYXJbbmdNb2RlbF0sU2VhcmNoQmFyW2Zvcm1Db250cm9sTmFtZV0sU2VhcmNoQmFyW2Zvcm1Db250cm9sXSwnICtcbiAgICAnc2VhcmNoQmFyW25nTW9kZWxdLHNlYXJjaEJhcltmb3JtQ29udHJvbE5hbWVdLHNlYXJjaEJhcltmb3JtQ29udHJvbF0sJyArXG4gICAgJ3NlYXJjaGJhcltuZ01vZGVsXSxzZWFyY2hiYXJbZm9ybUNvbnRyb2xOYW1lXSxzZWFyY2hiYXJbZm9ybUNvbnRyb2xdLCcgK1xuICAgICdzZWFyY2gtYmFyW25nTW9kZWxdLCBzZWFyY2gtYmFyW2Zvcm1Db250cm9sTmFtZV0sc2VhcmNoLWJhcltmb3JtQ29udHJvbF0nLFxuICBwcm92aWRlcnM6IFtURVhUX1ZBTFVFX0FDQ0VTU09SXSxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhbmd1bGFyLWVzbGludC9uby1ob3N0LW1ldGFkYXRhLXByb3BlcnR5XG4gIGhvc3Q6IHtcbiAgICAnKGJsdXIpJzogJ29uVG91Y2hlZCgpJyxcbiAgICAnKHRleHRDaGFuZ2UpJzogJ29uQ2hhbmdlKCRldmVudC52YWx1ZSknLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBUZXh0VmFsdWVBY2Nlc3NvciBleHRlbmRzIEJhc2VWYWx1ZUFjY2Vzc29yPFRleHRWaWV3PiB7XG4gIC8vIHRzbGludDpkaXNhYmxlLWxpbmU6ZGlyZWN0aXZlLWNsYXNzLXN1ZmZpeFxuICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XG4gICAgc3VwZXIoZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTtcbiAgfVxuXG4gIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQge1xuICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBzdXBlci5ub3JtYWxpemVWYWx1ZSh2YWx1ZSA/IGAke3ZhbHVlfWAgOiB2YWx1ZSk7XG4gICAgdGhpcy52aWV3LnRleHQgPSBub3JtYWxpemVkO1xuICB9XG59XG4iXX0=