import { Directive, ElementRef, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { BaseValueAccessor } from './base-value-accessor';
import * as i0 from "@angular/core";
const SELECTED_INDEX_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => SelectedIndexValueAccessor),
    multi: true,
};
/**
 * The accessor for setting a selectedIndex and listening to changes that is used by the
 * {@link NgModel} directives.
 *
 *  ### Example
 *  ```
 *  <SegmentedBar [(ngModel)]="model.test">
 *  ```
 */
class SelectedIndexValueAccessor extends BaseValueAccessor {
    // tslint:disable-line:max-line-length directive-class-suffix
    constructor(elementRef) {
        super(elementRef.nativeElement);
    }
    writeValue(value) {
        const normalized = super.normalizeValue(value);
        this.value = normalized;
        if (this.viewInitialized) {
            this.view.selectedIndex = this.value;
        }
    }
    ngAfterViewInit() {
        this.viewInitialized = true;
        this.view.selectedIndex = this.value;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: SelectedIndexValueAccessor, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.0.1", type: SelectedIndexValueAccessor, selector: "SegmentedBar[ngModel],SegmentedBar[formControlName],SegmentedBar[formControl],segmentedBar[ngModel],segmentedBar[formControlName],segmentedBar[formControl],segmentedbar[ngModel],segmentedbar[formControlName],segmentedbar[formControl],segmented-bar[ngModel],segmented-bar[formControlName],segmented-bar[formControl],ListPicker[ngModel],ListPicker[formControlName],ListPicker[formControl],listPicker[ngModel],listPicker[formControlName],listPicker[formControl],listpicker[ngModel],listpicker[formControlName],listpicker[formControl],list-picker[ngModel],list-picker[formControlName],list-picker[formControl],TabView[ngModel],TabView[formControlName],TabView[formControl],tabView[ngModel],tabView[formControlName],tabView[formControl],tabview[ngModel],tabview[formControlName],tabview[formControl],tab-view[ngModel],tab-view[formControlName],tab-view[formControl]", host: { listeners: { "selectedIndexChange": "onChange($event.value)" } }, providers: [SELECTED_INDEX_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 }); }
}
export { SelectedIndexValueAccessor };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: SelectedIndexValueAccessor, decorators: [{
            type: Directive,
            args: [{
                    selector: 'SegmentedBar[ngModel],SegmentedBar[formControlName],SegmentedBar[formControl],' +
                        'segmentedBar[ngModel],segmentedBar[formControlName],segmentedBar[formControl],' +
                        'segmentedbar[ngModel],segmentedbar[formControlName],segmentedbar[formControl],' +
                        'segmented-bar[ngModel],segmented-bar[formControlName],segmented-bar[formControl],' +
                        'ListPicker[ngModel],ListPicker[formControlName],ListPicker[formControl],' +
                        'listPicker[ngModel],listPicker[formControlName],listPicker[formControl],' +
                        'listpicker[ngModel],listpicker[formControlName],listpicker[formControl],' +
                        'list-picker[ngModel],list-picker[formControlName],list-picker[formControl],' +
                        'TabView[ngModel],TabView[formControlName],TabView[formControl],' +
                        'tabView[ngModel],tabView[formControlName],tabView[formControl],' +
                        'tabview[ngModel],tabview[formControlName],tabview[formControl],' +
                        'tab-view[ngModel],tab-view[formControlName],tab-view[formControl]',
                    providers: [SELECTED_INDEX_VALUE_ACCESSOR],
                    // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                    host: {
                        '(selectedIndexChange)': 'onChange($event.value)',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0ZWRJbmRleC12YWx1ZS1hY2Nlc3Nvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2FuZ3VsYXIvc3JjL2xpYi9mb3Jtcy92YWx1ZS1hY2Nlc3NvcnMvc2VsZWN0ZWRJbmRleC12YWx1ZS1hY2Nlc3Nvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRW5ELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDOztBQUUxRCxNQUFNLDZCQUE2QixHQUFHO0lBQ3BDLE9BQU8sRUFBRSxpQkFBaUI7SUFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQztJQUN6RCxLQUFLLEVBQUUsSUFBSTtDQUNaLENBQUM7QUFJRjs7Ozs7Ozs7R0FRRztBQUNILE1Bb0JhLDBCQUEyQixTQUFRLGlCQUFpQztJQUMvRSw2REFBNkQ7SUFDN0QsWUFBWSxVQUFzQjtRQUNoQyxLQUFLLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFLRCxVQUFVLENBQUMsS0FBVTtRQUNuQixNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDO1FBRXhCLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1NBQ3RDO0lBQ0gsQ0FBQztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztRQUM1QixJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3ZDLENBQUM7OEdBckJVLDBCQUEwQjtrR0FBMUIsMEJBQTBCLGk4QkFOMUIsQ0FBQyw2QkFBNkIsQ0FBQzs7U0FNL0IsMEJBQTBCOzJGQUExQiwwQkFBMEI7a0JBcEJ0QyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFDTixnRkFBZ0Y7d0JBQ2hGLGdGQUFnRjt3QkFDaEYsZ0ZBQWdGO3dCQUNoRixtRkFBbUY7d0JBQ25GLDBFQUEwRTt3QkFDMUUsMEVBQTBFO3dCQUMxRSwwRUFBMEU7d0JBQzFFLDZFQUE2RTt3QkFDN0UsaUVBQWlFO3dCQUNqRSxpRUFBaUU7d0JBQ2pFLGlFQUFpRTt3QkFDakUsbUVBQW1FO29CQUNyRSxTQUFTLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQztvQkFDMUMscUVBQXFFO29CQUNyRSxJQUFJLEVBQUU7d0JBQ0osdUJBQXVCLEVBQUUsd0JBQXdCO3FCQUNsRDtpQkFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgZm9yd2FyZFJlZiwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSAnQG5hdGl2ZXNjcmlwdC9jb3JlJztcbmltcG9ydCB7IEJhc2VWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnLi9iYXNlLXZhbHVlLWFjY2Vzc29yJztcblxuY29uc3QgU0VMRUNURURfSU5ERVhfVkFMVUVfQUNDRVNTT1IgPSB7XG4gIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBTZWxlY3RlZEluZGV4VmFsdWVBY2Nlc3NvciksXG4gIG11bHRpOiB0cnVlLFxufTtcblxuZXhwb3J0IHR5cGUgU2VsZWN0YWJsZVZpZXcgPSB7IHNlbGVjdGVkSW5kZXg6IG51bWJlciB9ICYgVmlldztcblxuLyoqXG4gKiBUaGUgYWNjZXNzb3IgZm9yIHNldHRpbmcgYSBzZWxlY3RlZEluZGV4IGFuZCBsaXN0ZW5pbmcgdG8gY2hhbmdlcyB0aGF0IGlzIHVzZWQgYnkgdGhlXG4gKiB7QGxpbmsgTmdNb2RlbH0gZGlyZWN0aXZlcy5cbiAqXG4gKiAgIyMjIEV4YW1wbGVcbiAqICBgYGBcbiAqICA8U2VnbWVudGVkQmFyIFsobmdNb2RlbCldPVwibW9kZWwudGVzdFwiPlxuICogIGBgYFxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6XG4gICAgJ1NlZ21lbnRlZEJhcltuZ01vZGVsXSxTZWdtZW50ZWRCYXJbZm9ybUNvbnRyb2xOYW1lXSxTZWdtZW50ZWRCYXJbZm9ybUNvbnRyb2xdLCcgK1xuICAgICdzZWdtZW50ZWRCYXJbbmdNb2RlbF0sc2VnbWVudGVkQmFyW2Zvcm1Db250cm9sTmFtZV0sc2VnbWVudGVkQmFyW2Zvcm1Db250cm9sXSwnICtcbiAgICAnc2VnbWVudGVkYmFyW25nTW9kZWxdLHNlZ21lbnRlZGJhcltmb3JtQ29udHJvbE5hbWVdLHNlZ21lbnRlZGJhcltmb3JtQ29udHJvbF0sJyArXG4gICAgJ3NlZ21lbnRlZC1iYXJbbmdNb2RlbF0sc2VnbWVudGVkLWJhcltmb3JtQ29udHJvbE5hbWVdLHNlZ21lbnRlZC1iYXJbZm9ybUNvbnRyb2xdLCcgK1xuICAgICdMaXN0UGlja2VyW25nTW9kZWxdLExpc3RQaWNrZXJbZm9ybUNvbnRyb2xOYW1lXSxMaXN0UGlja2VyW2Zvcm1Db250cm9sXSwnICtcbiAgICAnbGlzdFBpY2tlcltuZ01vZGVsXSxsaXN0UGlja2VyW2Zvcm1Db250cm9sTmFtZV0sbGlzdFBpY2tlcltmb3JtQ29udHJvbF0sJyArXG4gICAgJ2xpc3RwaWNrZXJbbmdNb2RlbF0sbGlzdHBpY2tlcltmb3JtQ29udHJvbE5hbWVdLGxpc3RwaWNrZXJbZm9ybUNvbnRyb2xdLCcgK1xuICAgICdsaXN0LXBpY2tlcltuZ01vZGVsXSxsaXN0LXBpY2tlcltmb3JtQ29udHJvbE5hbWVdLGxpc3QtcGlja2VyW2Zvcm1Db250cm9sXSwnICtcbiAgICAnVGFiVmlld1tuZ01vZGVsXSxUYWJWaWV3W2Zvcm1Db250cm9sTmFtZV0sVGFiVmlld1tmb3JtQ29udHJvbF0sJyArXG4gICAgJ3RhYlZpZXdbbmdNb2RlbF0sdGFiVmlld1tmb3JtQ29udHJvbE5hbWVdLHRhYlZpZXdbZm9ybUNvbnRyb2xdLCcgK1xuICAgICd0YWJ2aWV3W25nTW9kZWxdLHRhYnZpZXdbZm9ybUNvbnRyb2xOYW1lXSx0YWJ2aWV3W2Zvcm1Db250cm9sXSwnICtcbiAgICAndGFiLXZpZXdbbmdNb2RlbF0sdGFiLXZpZXdbZm9ybUNvbnRyb2xOYW1lXSx0YWItdmlld1tmb3JtQ29udHJvbF0nLFxuICBwcm92aWRlcnM6IFtTRUxFQ1RFRF9JTkRFWF9WQUxVRV9BQ0NFU1NPUl0sXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYW5ndWxhci1lc2xpbnQvbm8taG9zdC1tZXRhZGF0YS1wcm9wZXJ0eVxuICBob3N0OiB7XG4gICAgJyhzZWxlY3RlZEluZGV4Q2hhbmdlKSc6ICdvbkNoYW5nZSgkZXZlbnQudmFsdWUpJyxcbiAgfSxcbn0pXG5leHBvcnQgY2xhc3MgU2VsZWN0ZWRJbmRleFZhbHVlQWNjZXNzb3IgZXh0ZW5kcyBCYXNlVmFsdWVBY2Nlc3NvcjxTZWxlY3RhYmxlVmlldz4gaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbGluZTptYXgtbGluZS1sZW5ndGggZGlyZWN0aXZlLWNsYXNzLXN1ZmZpeFxuICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XG4gICAgc3VwZXIoZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTtcbiAgfVxuXG4gIHByaXZhdGUgdmFsdWU6IG51bWJlcjtcbiAgcHJpdmF0ZSB2aWV3SW5pdGlhbGl6ZWQ6IGJvb2xlYW47XG5cbiAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZCB7XG4gICAgY29uc3Qgbm9ybWFsaXplZCA9IHN1cGVyLm5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcbiAgICB0aGlzLnZhbHVlID0gbm9ybWFsaXplZDtcblxuICAgIGlmICh0aGlzLnZpZXdJbml0aWFsaXplZCkge1xuICAgICAgdGhpcy52aWV3LnNlbGVjdGVkSW5kZXggPSB0aGlzLnZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnZpZXdJbml0aWFsaXplZCA9IHRydWU7XG4gICAgdGhpcy52aWV3LnNlbGVjdGVkSW5kZXggPSB0aGlzLnZhbHVlO1xuICB9XG59XG4iXX0=