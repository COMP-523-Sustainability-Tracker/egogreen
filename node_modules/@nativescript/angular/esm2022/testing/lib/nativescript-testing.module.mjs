import { NgModule } from '@angular/core';
import { TestComponentRenderer } from '@angular/core/testing';
import { COMMON_PROVIDERS, APP_ROOT_VIEW, NativeScriptModule } from '@nativescript/angular';
import { NativeScriptTestComponentRenderer } from './nativescript_test_component_renderer';
import { testingRootView } from './test-root-view';
import * as i0 from "@angular/core";
if (typeof Node === 'undefined' && !global.Node) {
    class DummyNode {
    }
    global.Node = DummyNode;
}
/**
 * Providers array is exported for cases where a custom module has to be constructed
 * to test a particular piece of code. This can happen, for example, if you are trying
 * to test dynamic component loading and need to specify an entryComponent for the testing
 * module.
 */
export const NATIVESCRIPT_TESTING_PROVIDERS = [...COMMON_PROVIDERS, { provide: APP_ROOT_VIEW, useFactory: testingRootView }, { provide: TestComponentRenderer, useClass: NativeScriptTestComponentRenderer }];
/**
 * NativeScript testing support module. Enables use of TestBed for angular components, directives,
 * pipes, and services.
 */
class NativeScriptTestingModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: NativeScriptTestingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.0.1", ngImport: i0, type: NativeScriptTestingModule, exports: [NativeScriptModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: NativeScriptTestingModule, providers: NATIVESCRIPT_TESTING_PROVIDERS, imports: [NativeScriptModule] }); }
}
export { NativeScriptTestingModule };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: NativeScriptTestingModule, decorators: [{
            type: NgModule,
            args: [{
                    exports: [NativeScriptModule],
                    providers: NATIVESCRIPT_TESTING_PROVIDERS,
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlc2NyaXB0LXRlc3RpbmcubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvYW5ndWxhci90ZXN0aW5nL3NyYy9saWIvbmF0aXZlc2NyaXB0LXRlc3RpbmcubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQVksTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGFBQWEsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzVGLE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQzNGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFFbkQsSUFBSSxPQUFPLElBQUksS0FBSyxXQUFXLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO0lBQy9DLE1BQU0sU0FBUztLQUFHO0lBQ2xCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsU0FBZ0IsQ0FBQztDQUNoQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sOEJBQThCLEdBQWUsQ0FBQyxHQUFHLGdCQUFnQixFQUFFLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsUUFBUSxFQUFFLGlDQUFpQyxFQUFFLENBQUMsQ0FBQztBQUUxTjs7O0dBR0c7QUFDSCxNQUlhLHlCQUF5Qjs4R0FBekIseUJBQXlCOytHQUF6Qix5QkFBeUIsWUFIMUIsa0JBQWtCOytHQUdqQix5QkFBeUIsYUFGekIsOEJBQThCLFlBRC9CLGtCQUFrQjs7U0FHakIseUJBQXlCOzJGQUF6Qix5QkFBeUI7a0JBSnJDLFFBQVE7bUJBQUM7b0JBQ1IsT0FBTyxFQUFFLENBQUMsa0JBQWtCLENBQUM7b0JBQzdCLFNBQVMsRUFBRSw4QkFBOEI7aUJBQzFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIFByb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUZXN0Q29tcG9uZW50UmVuZGVyZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuaW1wb3J0IHsgQ09NTU9OX1BST1ZJREVSUywgQVBQX1JPT1RfVklFVywgTmF0aXZlU2NyaXB0TW9kdWxlIH0gZnJvbSAnQG5hdGl2ZXNjcmlwdC9hbmd1bGFyJztcbmltcG9ydCB7IE5hdGl2ZVNjcmlwdFRlc3RDb21wb25lbnRSZW5kZXJlciB9IGZyb20gJy4vbmF0aXZlc2NyaXB0X3Rlc3RfY29tcG9uZW50X3JlbmRlcmVyJztcbmltcG9ydCB7IHRlc3RpbmdSb290VmlldyB9IGZyb20gJy4vdGVzdC1yb290LXZpZXcnO1xuXG5pZiAodHlwZW9mIE5vZGUgPT09ICd1bmRlZmluZWQnICYmICFnbG9iYWwuTm9kZSkge1xuICBjbGFzcyBEdW1teU5vZGUge31cbiAgZ2xvYmFsLk5vZGUgPSBEdW1teU5vZGUgYXMgYW55O1xufVxuXG4vKipcbiAqIFByb3ZpZGVycyBhcnJheSBpcyBleHBvcnRlZCBmb3IgY2FzZXMgd2hlcmUgYSBjdXN0b20gbW9kdWxlIGhhcyB0byBiZSBjb25zdHJ1Y3RlZFxuICogdG8gdGVzdCBhIHBhcnRpY3VsYXIgcGllY2Ugb2YgY29kZS4gVGhpcyBjYW4gaGFwcGVuLCBmb3IgZXhhbXBsZSwgaWYgeW91IGFyZSB0cnlpbmdcbiAqIHRvIHRlc3QgZHluYW1pYyBjb21wb25lbnQgbG9hZGluZyBhbmQgbmVlZCB0byBzcGVjaWZ5IGFuIGVudHJ5Q29tcG9uZW50IGZvciB0aGUgdGVzdGluZ1xuICogbW9kdWxlLlxuICovXG5leHBvcnQgY29uc3QgTkFUSVZFU0NSSVBUX1RFU1RJTkdfUFJPVklERVJTOiBQcm92aWRlcltdID0gWy4uLkNPTU1PTl9QUk9WSURFUlMsIHsgcHJvdmlkZTogQVBQX1JPT1RfVklFVywgdXNlRmFjdG9yeTogdGVzdGluZ1Jvb3RWaWV3IH0sIHsgcHJvdmlkZTogVGVzdENvbXBvbmVudFJlbmRlcmVyLCB1c2VDbGFzczogTmF0aXZlU2NyaXB0VGVzdENvbXBvbmVudFJlbmRlcmVyIH1dO1xuXG4vKipcbiAqIE5hdGl2ZVNjcmlwdCB0ZXN0aW5nIHN1cHBvcnQgbW9kdWxlLiBFbmFibGVzIHVzZSBvZiBUZXN0QmVkIGZvciBhbmd1bGFyIGNvbXBvbmVudHMsIGRpcmVjdGl2ZXMsXG4gKiBwaXBlcywgYW5kIHNlcnZpY2VzLlxuICovXG5ATmdNb2R1bGUoe1xuICBleHBvcnRzOiBbTmF0aXZlU2NyaXB0TW9kdWxlXSxcbiAgcHJvdmlkZXJzOiBOQVRJVkVTQ1JJUFRfVEVTVElOR19QUk9WSURFUlMsXG59KVxuZXhwb3J0IGNsYXNzIE5hdGl2ZVNjcmlwdFRlc3RpbmdNb2R1bGUge31cbiJdfQ==